head(X)
dim(X)
X = read.csv('~/Downloads/NULL/A0-c0.25-mc1-sgm.csv',header=FALSE)
dim(X)
XX = matrix(0,nrow=100^2,ncol=10)
for(itr in 0:9){
LHS = 1+100*itr
RHS = 100 + 100*itr
XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))
}
require(Matrix)
image(Matrix(XX[,,1],100,100))
image(Matrix(XX[,1],100,100))
for(file.itr in 1:100) {#
	fname = sprintf('~/Downloads/NULL/A0-c0.25-mc%d-sgm.csv', mcitr);#
	X = read.csv(fname,header=FALSE)#
	XX = matrix(0,nrow=100^2,ncol=10)#
	for(itr in 0:9){#
	    LHS = 1+100*itr#
	    RHS = 100 + 100*itr#
	    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
	}	#
	filename = paste0('NEWXXX0/XXX0_',file.itr,'.csv')#
	write.table(XX,file=filename,quote=FALSE,sep=',',row.names=FALSE,col.names=F)#
}
for(file.itr in 1:100) {#
	fname = sprintf('~/Downloads/NULL/A0-c0.25-mc%d-sgm.csv', file.itr);#
	X = read.csv(fname,header=FALSE)#
	XX = matrix(0,nrow=100^2,ncol=10)#
	for(itr in 0:9){#
	    LHS = 1+100*itr#
	    RHS = 100 + 100*itr#
	    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
	}	#
	filename = paste0('NEWXXX0/XXX0_',file.itr,'.csv')#
	write.table(XX,file=filename,quote=FALSE,sep=',',row.names=FALSE,col.names=F)#
}
}
for(file.itr in 1:100) {#
	fname = sprintf('~/Downloads/NULL/A0-c0.25-mc%d-sgm.csv', file.itr);#
	X = read.csv(fname,header=FALSE)#
	XX = matrix(0,nrow=100^2,ncol=10)#
	for(itr in 0:9){#
	    LHS = 1+100*itr#
	    RHS = 100 + 100*itr#
	    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
	}	#
	filename = paste0('NEWXXX0case/XXX0_',file.itr,'.csv')#
	write.table(XX,file=filename,quote=FALSE,sep=',',row.names=FALSE,col.names=F)#
}
filename = paste0('~/Downloads/NEWXXX0case/XXX0_',file.itr,'.csv')
for(file.itr in 1:100) {#
	fname = sprintf('~/Downloads/NULL/A0-c0.25-mc%d-sgm.csv', file.itr);#
	X = read.csv(fname,header=FALSE)#
	XX = matrix(0,nrow=100^2,ncol=10)#
	for(itr in 0:9){#
	    LHS = 1+100*itr#
	    RHS = 100 + 100*itr#
	    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
	}	#
	filename = paste0('~/Downloads/NEWXXX0case/XXX0_',file.itr,'.csv')#
	write.table(XX,file=filename,quote=FALSE,sep=',',row.names=FALSE,col.names=F)#
}
for(file.itr in 1:100) {#
	fname = sprintf('~/Downloads/ALT/gA-c0.25-mc%d-sgm.csv', file.itr);#
	X = read.csv(fname,header=FALSE)#
	XX = matrix(0,nrow=100^2,ncol=10)#
	for(itr in 0:9){#
	    LHS = 1+100*itr#
	    RHS = 100 + 100*itr#
	    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
	}	#
	filename = paste0('~/Downloads/NEWXXXAcase/XXXA_',file.itr,'.csv')#
	write.table(XX,file=filename,quote=FALSE,sep=',',row.names=FALSE,col.names=F)#
}
q()
x = rnorm(100)
y = 10 + x
lm(y~x)
myfit = lm(y~x)
summary(myfit)
install.packages(xtable)
q()
?plm
for(citr in c(0,0.1,0.2,0.3,0.4,0.5)){#
	for(file.itr in 1:100) {#
		fname = sprintf('~/Downloads/Output-c%d/A0-c%d-mc%d-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		filename = sprintf('~/Downloads/Output-c%d/XXX0_%d.csv', citr, file.itr);		#
		write.table(XX,file=filename,quote=FALSE,sep=',',row.names=FALSE,col.names=F)#
	}	#
	for(file.itr in 1:100) {#
		fname = sprintf('~/Downloads/Output-c%d/A0-c%d-mc%d-nosgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		filename = sprintf('~/Downloads/Output-c%d/XXXA_%d.csv', citr, file.itr);		#
		write.table(XX,file=filename,quote=FALSE,sep=',',row.names=FALSE,col.names=F)#
	}#
}
for(file.itr in 1:100) {#
		fname = sprintf('~/Downloads/Output-c%d/AA-c%d-mc%d-nosgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		filename = sprintf('~/Downloads/Output-c%d/XXXA_%d.csv', citr, file.itr);		#
		write.table(XX,file=filename,quote=FALSE,sep=',',row.names=FALSE,col.names=F)#
	}
citr
citr=0
for(file.itr in 1:100) {#
		fname = sprintf('~/Downloads/Output-c%d/AA-c%d-mc%d-nosgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		filename = sprintf('~/Downloads/Output-c%d/XXXA_%d.csv', citr, file.itr);		#
		write.table(XX,file=filename,quote=FALSE,sep=',',row.names=FALSE,col.names=F)#
	}
for(citr in c(0.1,0.2,0.3,0.4,0.5)){#
	for(file.itr in 1:100) {#
		fname = sprintf('~/Downloads/Output-c%f/A0-c%f-mc%d-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		filename = sprintf('~/Downloads/Output-c%d/XXX0_%d.csv', citr, file.itr);		#
		write.table(XX,file=filename,quote=FALSE,sep=',',row.names=FALSE,col.names=F)#
	}	#
	for(file.itr in 1:100) {#
		fname = sprintf('~/Downloads/Output-c%f/AA-c%f-mc%d-nosgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		filename = sprintf('~/Downloads/Output-c%d/XXXA_%d.csv', citr, file.itr);		#
		write.table(XX,file=filename,quote=FALSE,sep=',',row.names=FALSE,col.names=F)#
	}#
}
fname = sprintf('~/Downloads/Output-c%/A0-c%f-mc%d-sgm.csv', citr, citr,file.itr);
fname = sprintf('~/Downloads/Output-c%f1/A0-c%f-mc%d-sgm.csv', citr, citr,file.itr);
fname
fname = sprintf('~/Downloads/Output-c%2f/A0-c%f-mc%d-sgm.csv', citr, citr,file.itr);
fname
fname = sprintf('~/Downloads/Output-c%s/A0-c%s-mc%d-sgm.csv', citr, citr,file.itr);
fname
for(citr in c(0.1,0.2,0.3,0.4,0.5)){#
	for(file.itr in 1:100) {#
		fname = sprintf('~/Downloads/Output-c%s/A0-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		filename = sprintf('~/Downloads/Output-c%s/XXX0_%s.csv', citr, file.itr);		#
		write.table(XX,file=filename,quote=FALSE,sep=',',row.names=FALSE,col.names=F)#
	}	#
	for(file.itr in 1:100) {#
		fname = sprintf('~/Downloads/Output-c%s/AA-c%s-mc%s-nosgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		filename = sprintf('~/Downloads/Output-c%s/XXXA_%s.csv', citr, file.itr);		#
		write.table(XX,file=filename,quote=FALSE,sep=',',row.names=FALSE,col.names=F)#
	}#
}
for(citr in c(0,0.1,0.2,0.3,0.4,0.5)){#
	for(file.itr in 1:100) {#
		fname = sprintf('~/Downloads/Output-c%s/A0-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		filename = sprintf('~/Downloads/Output-c%s/XXX0_%s.csv', citr, file.itr);		#
		write.table(XX,file=filename,quote=FALSE,sep=',',row.names=FALSE,col.names=F)#
	}	#
	for(file.itr in 1:100) {#
		fname = sprintf('~/Downloads/Output-c%s/AA-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		filename = sprintf('~/Downloads/Output-c%s/XXXA_%s.csv', citr, file.itr);		#
		write.table(XX,file=filename,quote=FALSE,sep=',',row.names=FALSE,col.names=F)#
	}#
}
filename = sprintf('~/Downloads/Output-c%s/XXXA_%s.csv', citr, file.itr);
for(citr in c(0,0.1,0.2,0.3,0.4,0.5)){#
	for(file.itr in 1:100) {#
		fname = sprintf('~/Downloads/Output-c%s/A0-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		filename = sprintf('~/Downloads/Output-c%s/XXX0_%s.csv', citr, file.itr);		#
		write.table(XX,file=filename,quote=FALSE,sep=',',row.names=FALSE,col.names=F)#
	}	#
	for(file.itr in 1:100) {#
		fname = sprintf('~/Downloads/Output-c%s/AA-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		filename = sprintf('~/Downloads/Output-c%s/XXXA_%s.csv', citr, file.itr);		#
		write.table(XX,file=filename,quote=FALSE,sep=',',row.names=FALSE,col.names=F)#
	}#
}
image(Matrix(XX,100,100))
require(Matrix)
image(Matrix(XX,100,100))
dim(XX)
image(Matrix(XX[,1],100,100))
file.itr
citr
citr = 0
fname = sprintf('~/Downloads/Output-c%s/A0-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}
image(Matrix(XX[,1],100,100))
fname = sprintf('~/Downloads/Output-c%s/AA-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}
image(Matrix(XX[,1],100,100))
citr
fname = sprintf('~/Downloads/Output-c%s/A0-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}
file.itr
citr
fname = sprintf('~/Downloads/Output-c%s/A0-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		image(Matrix(XX[,1],100,100))
fname = sprintf('~/Downloads/Output-c%s/AA-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		image(Matrix(XX[,1],100,100))
filter.itr=1
file.itr=1
citr=0
fname = sprintf('~/Downloads/Output-c%s/A0-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		image(Matrix(XX[,1],100,100))
fname = sprintf('~/Downloads/Output-c%s/AA-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		image(Matrix(XX[,1],100,100))
citr = 0
fname = sprintf('~/Downloads/Output-c%s/A0-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		image(Matrix(XX[,1],100,100))
dev.new()
fname = sprintf('~/Downloads/Output-c%s/AA-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		image(Matrix(XX[,1],100,100))
citr = 0.5
fname = sprintf('~/Downloads/Output-c%s/A0-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		image(Matrix(XX[,1],100,100))
fname = sprintf('~/Downloads/Output-c%s/A0-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		dev.new()#
		image(Matrix(XX[,1],100,100))
dev.off()
fname = sprintf('~/Downloads/Output-c%s/A0-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		dev.new()#
		image(Matrix(XX[,1],100,100))
fname = sprintf('~/Downloads/Output-c%s/AA-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		dev.new()#
		image(Matrix(XX[,1],100,100))
citr
citr=0
for(file.itr in 1:100) {#
		fname = sprintf('~/Downloads/Output-c%s/A0-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		dev.new()#
		image(Matrix(XX[,1],100,100))
fname = sprintf('~/Downloads/Output-c%s/AA-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		dev.new()#
		image(Matrix(XX[,1],100,100))
DFdfasd
'\;'
fname = sprintf('~/Downloads/Output-c%s/A0-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		dev.new()#
		image(Matrix(XX[,1],100,100))
fname = sprintf('~/Downloads/Output-c%s/AA-c%s-mc%s-sgm.csv', citr, citr,file.itr);#
		X = read.csv(fname,header=FALSE)#
		XX = matrix(0,nrow=100^2,ncol=10)#
		for(itr in 0:9){#
		    LHS = 1+100*itr#
		    RHS = 100 + 100*itr#
		    XX[,itr+1]= as.vector(as.matrix(X[LHS:RHS,LHS:RHS]))#
		}	#
		dev.new()#
		image(Matrix(XX[,1],100,100))
q()
19/99/
1
19/99
19/199
29/199
seq(0,1,0.0.5)
seq(0,0.5,length=20)
q()
install.packages('rJava')
install.packages('caTools')
install.packages('~/Downloads/segue_0.05.tar.gz')
aggregate
?aggregate
testDF <- data.frame(v1 = c(1,3,5,7,8,3,5,NA,4,5,7,9),#
                     v2 = c(11,33,55,77,88,33,55,NA,44,55,77,99) )#
by1 <- c("red", "blue", 1, 2, NA, "big", 1, 2, "red", 1, NA, 12)#
by2 <- c("wet", "dry", 99, 95, NA, "damp", 95, 99, "red", 99, NA, NA)
by1
by2
aggregate(x = testDF, by = list(by1, by2), FUN = "mean")
fby1 <- factor(by1, exclude = "")#
fby2 <- factor(by2, exclude = "")#
aggregate(x = testDF, by = list(fby1, fby2), FUN = "mean")
cbind(testDF,by1,by2)
require(getopt)
install.packages('HadoopStreaming')
install.packages('getopt')
require(opt)
require(getopt)
require(HadoopStreaming)
hsTableReader
?hsTableReader
require(xlsx) || install.packages("xlsx")
fsize <- 21#
lsize <- 1.4#
csize <- 1.7#
shadecol <- "#DEEBF7" ## light blue#
tbeg <- 0#
tend <- 39#
stend <- 30#
theme_set(theme_bw(base_size = fsize))#
theme_set(theme_grey(base_size = fsize))#
mycol <- colorRampPalette(c("white","lightblue","darkblue","black"))(100)#
## other variables#
clab <- c("pbd1","pbd2","pbd3","ppk1","ppk2","iav1","61d0","38a1","38a2","20c0","11f0")#
featname <- c("area (a.u.)",#
              "forward/backward crawling bias",#
              "head turn (deg)",#
              "sideways movement speed (mm/sec)",#
              "direction of motion",#
              "length (a.u.)",#
              "width (a.u.)",#
              "speed (mm/sec)")#
nfeat <- length(featname)#
makeFigure1 <- function()#
{#
    ## (b)#
    mydish <- "20101217_131413"#
    datx <- daty <- avec <- fvec <- cvec <- NULL#
    for (featnum in 1:nfeat) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[featnum]+1#
        end <- begi[featnum+1]#
        dat <- Znorm[laball2$dish==mydish,beg:end]#
        daty <- c(daty,as.vector(t(dat)))#
        datx <- c(datx,seq(tbeg,tend,by=0.5))#
        avec <- c(avec,rep(1:nrow(dat),each=ncol(dat)))#
        fvec <- c(fvec,rep(featname[featnum],length(dat)))#
        cvec <- c(cvec,rep("grey",length(dat)))#
    }#
    dat.df <- data.frame(x=datx,y=daty,anim=factor(avec),feat=fvec,col=cvec)#
    n <- nrow(dat.df)#
    dat.df$feat <- factor(dat.df$feat, levels = featname)#
    p <- ggplot(data=dat.df, aes(x=x, y=y)) +#
           geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
           facet_wrap(~feat, nrow=4, scales="free_y") +#
           geom_line(aes(colour=col, group=anim, alpha=0.5)) +#
           labs(x="time (sec)", y="response", shape="", colour="", linetype="") +#
           theme_bw() +#
           theme(legend.position="none") +#
           theme(axis.title.x=element_text(size=fsize)) +#
           theme(axis.title.y=element_text(size=fsize,angle=90)) +#
           theme(strip.text=element_text(size=rel(lsize-0.4)))#
    p <- p + scale_color_manual(values=rep("grey",n))#
    print(p)#
}#
makeFigure2A <- function()#
{#
    #################
    ## (a)#
    #################
    mydish <- "20101217_131413"#
    datx <- daty <- avec <- fvec <- cvec <- NULL#
    set.seed(12345)#
    samp <- sample(nrow(Znorm),1000,rep=FALSE)#
    for (featnum in 1:nfeat) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[featnum]+1#
        end <- begi[featnum+1]#
        dat <- Znorm[samp,beg:end]#
        daty <- c(daty,as.vector(t(dat)))#
        datx <- c(datx,seq(tbeg,tend,by=0.5))#
        avec <- c(avec,rep(1:nrow(dat),each=ncol(dat)))#
        fvec <- c(fvec,rep(featname[featnum],length(dat)))#
        cvec <- c(cvec,rep("grey",length(dat)))#
    }#
    dat.df <- data.frame(x=datx,y=daty,anim=factor(avec),feat=fvec,col=cvec)#
    (n <- nrow(dat.df))#
    dat.df$feat <- factor(dat.df$feat, levels = featname)#
    p <- ggplot(data=dat.df, aes(x=x, y=y)) +#
           geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
           facet_wrap(~feat, nrow=4, scales="free_y") +#
           geom_line(aes(colour=col, group=anim, alpha=0.5)) +#
           labs(x="time (sec)", y="", shape="", colour="", linetype="") +#
           theme_bw() +#
           theme(legend.position="none") +#
           theme(axis.title.x=element_text(size=fsize)) +#
           theme(axis.title.y=element_text(size=fsize,angle=90)) +#
           theme(strip.text=element_text(size=rel(lsize-0.4)))#
    p <- p + scale_color_manual(values=rep("grey",n))#
    print(p)#
}#
makeFigure2B <- function()#
{#
    #################
    ## (b)#
    #################
    cl <- laball2$cluster.d5#
    (khat <- max(cl))#
    (tt <- table(cl))#
    (samp <- as.integer(tt/min(tt)))#
    meanZ <- t(sapply(1:khat, function(x) colMeans(mdsz[cl==x,])))#
    min2 <- lapply(1:khat, function(x) {#
        sel3 <- which(cl==x);#
        delta <- dist2(mdsz[sel3,], meanZ[x,])#
        sel3[order(delta)[1:samp[x]]]#
    })#
    sel2 <- unlist(min2)#
    mdsz2 <- mdsz[sel2,]#
    dmat <- as.matrix(dist(mdsz2))#
    dmat[dmat>1] <- 1#
    dmat[dmat==max(dmat)] <- 1#
    newcl <- rep(1:khat,times=samp)#
    col5 <- rev(cm.colors(5))#
    set.seed(12345)#
    ord <- sample(1:nrow(dmat),rep=FALSE)#
    par(mar=c(4,2,3,2)+0.1) ## Reduced margins at top and left#
    plotcolordist(newcl,dmat[ord,ord],col5,border=FALSE,#
                  legend.args=list(text="interpoint dissimilarity",#
                  col="black", cex=1.3, side=4, line=2.5))#
    mtext("animal responses", side=3, line=0.5,cex=1.5)#
    mtext("animal responses", side=2, line=0.5, cex=1.5)#
}#
makeFigure2CF <- function()#
{#
    #################
    ## (c)#
    #################
    z31<-"(692,(1995,2763) 4758) 5450"#
    z32<-"((2515,1190) 3705,(3487,1603) 5090) 8795"#
    z33<-"((398,1157) 1555, 113) 1668"#
    z34<-"((1210,2225) 3435,(1037,244) 1281) 4716"#
    z35<-"((895,295) 1190,(661,441) 1102) 2292"#
    z36<-"((266,34) 300,(63,31) 94) 394"#
    z37<-"((1995,1371) 3366,(2748,3783) 6531) 9897"#
    z38<-"(425,(2305,1838) 4143) 4568"#
    z21 <- paste("(",z31,",",z32,")","14245")#
    z22 <- paste("(",z33,",",z34,")","6384")#
    z23 <- paste("(",z35,",",z36,")","2686")#
    z24 <- paste("(",z37,",",z38,")","14465")#
    z1 <- paste("(",z21,",",z22,")","20629")#
    z2 <- paste("(",z23,",",z24,")","17151")#
    z <- paste("(",z1,",",z2,")","37780",";")#
    mytree <- read.tree(text=z)#
    G <- length(mytree$tip.label)#
    sizes <- c(as.numeric(mytree$tip.label),as.numeric(mytree$node.label))#
    for (i in nodes(mytree)) {#
        mytree <- tree.set.tag(mytree, i, 'sizes', sizes[i])#
        mytree <- tree.set.tag(mytree, i, 'sizes', sizes[i])#
    }#
    plot.args <- list(#
                  mytree,#
                  node.size.by='sizes',#
                  node.size.scale = scale_size_continuous(limits=c(0, 40000), range=c(1, 5)),#
                  line.size.by='sizes',#
                  legend.position=c(6,15), # no effect!#
                  label.size=5,#
                  label.color=labcol#
                  )#
    p <- do.call(ggphylo, plot.args) + theme(legend.position="none")#
    p <- p + xlim(-0.2,6.5) + ylim(0,31) + xlab("tree depth level")#
    p <- p + theme(axis.title.x=element_text(size=fsize))#
    pp <- p + theme(axis.title.x=element_text(size=fsize))#
    xmin <- 5.7; xmax <- 6.1#
    for (i in 1:29) {#
        pp <- pp +#
        geom_rect(data=NULL, xmin=xmin, xmax=xmax, ymin=i-0.5, ymax=i+0.5, fill=labcol[i], color="black", alpha=0.5)#
        pp <- pp +#
        geom_text(data=NULL,x=5.9,y=i,label=i,color="white",size=4)#
    }#
    pp <- pp + theme(axis.ticks = element_blank(), axis.text.y = element_blank(), axis.title.y=element_blank())#
    pp <- pp + annotate("text",x=6.4,y=15.0,label="statistically distinguishable behaviotypes",angle=90,size=6)#
    pp <- pp + annotate("text",x=5.3,y=30.5,label="# animals",angle=0,size=4)#
    print(pp)#
    scan()#
    #################
    ## (f)#
    #################
    labs1 <- c("slow", "fast")#
    labs2 <- c("turners", "still or back-up",#
               "escape", "turn-avoid")#
    labs3 <- c("turn-turn-turn", "turn-slow-crawl",#
               "still", "back-up",#
               "wiggle-escape", "straight-escape",#
               "right-left-avoid", "left-right-avoid")#
    labs <- c(labs1,labs2,labs3)#
    labpos <- matrix(c(0.5,23.3, 0.5,8.3,#
                       1.5,27, 1.5,19.3, 1.5,11.75, 1.5,4.45,#
                       2.5,28.45, 2.5,25.22, 2.5,21.15, 2.5,17.2,#
                       2.5,13.2, 2.5,9.95, 2.5,6.2, 2.5,2.5),#
                     ncol=2, byrow=T)#
    labsize <- c(rep(3,length(labs1)),#
                 rep(2.5,length(labs2)),#
                 rep(2,length(labs3))) * 2.5#
    labcol1 <- rev(colorRampPalette(brewer.pal(11,"Reds"))(20))[1:7]#
    labcol2 <- rev(colorRampPalette(brewer.pal(11,"Oranges"))(20))[1:7]#
    labcol3 <- rev(colorRampPalette(brewer.pal(11,"PuBu"))(20))[1:8]#
    labcol4 <- rev(colorRampPalette(brewer.pal(11,"Greens"))(20))[1:7]#
    labcol11 <- labcol1[1:3]; labcol12 <- labcol1[4:7]#
    labcol21 <- labcol2[1:4]; labcol22 <- labcol2[5:7]#
    labcol1 <- c(labcol11,labcol21)#
    labcol2 <- c(labcol12,labcol22)#
    labcol <- c(labcol1,rev(labcol2),labcol3,rev(labcol4))#
    bcol <- c(labcol3[8], labcol1[7],#
              labcol4[3], labcol3[4], labcol2[3], labcol1[3],#
              labcol4[2], labcol4[5], labcol3[6], labcol3[3],#
              labcol2[2], labcol2[6], labcol1[6], labcol1[2])#
    p2 <- p + geom_text(data=NULL,x=labpos[1,1],y=labpos[1,2],label=labs[1],color=labcol3[8],size=labsize[1]) +#
      geom_text(data=NULL,x=labpos[2,1],y=labpos[2,2],label=labs[2],color=labcol1[7],size=labsize[2]) +#
      geom_text(data=NULL,x=labpos[3,1],y=labpos[3,2],label=labs[3],color=labcol4[3],size=labsize[3]) +#
      geom_text(data=NULL,x=labpos[4,1],y=labpos[4,2],label=labs[4],color=labcol3[4],size=labsize[4]) +#
      geom_text(data=NULL,x=labpos[5,1],y=labpos[5,2],label=labs[5],color=labcol2[3],size=labsize[5]) +#
      geom_text(data=NULL,x=labpos[6,1],y=labpos[6,2],label=labs[6],color=labcol1[3],size=labsize[6]) +#
      geom_text(data=NULL,x=labpos[7,1],y=labpos[7,2],label=labs[7],color=labcol4[2],size=labsize[7]) +#
      geom_text(data=NULL,x=labpos[8,1],y=labpos[8,2],label=labs[8],color=labcol4[5],size=labsize[8]) +#
      geom_text(data=NULL,x=labpos[9,1],y=labpos[9,2],label=labs[9],color=labcol3[6],size=labsize[9]) +#
      geom_text(data=NULL,x=labpos[10,1],y=labpos[10,2],label=labs[10],color=labcol3[3],size=labsize[10]) +#
      geom_text(data=NULL,x=labpos[11,1],y=labpos[11,2],label=labs[11],color=labcol2[2],size=labsize[11]) +#
      geom_text(data=NULL,x=labpos[12,1],y=labpos[12,2],label=labs[12],color=labcol2[6],size=labsize[12]) +#
      geom_text(data=NULL,x=labpos[13,1],y=labpos[13,2],label=labs[13],color=labcol1[6],size=labsize[13]) +#
      geom_text(data=NULL,x=labpos[14,1],y=labpos[14,2],label=labs[14],color=labcol1[2],size=labsize[14])#
    p2 <- p2 + theme(axis.title.x=element_text(size=fsize))#
    p3 <- p2#
    xmin <- 5.7; xmax <- 6.1#
    for (i in 1:29) {#
        p3 <- p3 +#
        geom_rect(data=NULL, xmin=xmin, xmax=xmax, ymin=i-0.5, ymax=i+0.5, fill=labcol[i], color="black", alpha=0.5)#
    }#
    p4 <- p3#
    for (i in 1:29) {#
        p4 <- p4 +#
        geom_text(data=NULL,x=5.9,y=i,label=i,color="white",size=4)#
    }#
    p4 <- p4 + theme(axis.ticks = element_blank(), axis.text.y = element_blank(), axis.title.y=element_blank())#
    p4 <- p4 + annotate("text",x=1.5,y=31.0,label="'post-hoc' human labels",angle=0,size=6)#
    p4 <- p4 + annotate("text",x=5.3,y=30.5,label="# animals",angle=0,size=4)#
    p5 <- p4 + annotate("text",x=6.4,y=15.0,label="statistically distinguishable behaviotypes",angle=90,size=6)#
    print(p5)#
}#
makeFigure2DE <- function()#
{#
    #################
    ## (d)#
    #################
    dat <- laball2$cluster.d5#
    subc <- 1:max(dat)#
    subcol2 <- labcol[subc]#
    numG <- 1:max(dat)#
    datx <- daty <- avec <- bvec <- fvec <- gvec <- cvec2 <- NULL#
    for (featnum in 1:nfeat) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[featnum]+1#
        end <- begi[featnum+1]#
        mvec <- svec <- evec <- kvec <- lvec <- cvec <- NULL#
        for (clusnum in numG) {#
            sel <- which(dat==clusnum)#
            meants <- apply(Znorm[sel,beg:end],2,mean)#
            sdts <- apply(Znorm[sel,beg:end],2,sd)#
            mvec <- c(mvec,meants)#
            svec <- c(svec,sdts)#
            evec <- c(evec,1.96*sdts/sqrt(length(sel)))#
            kvec <- c(kvec,rep(paste("C",sprintf("%02d",clusnum),sep=""),length(meants)))#
            cvec <- c(cvec,rep(labcol[clusnum],length(meants)))#
            lvec <- c(lvec,rep(clusnum,length(meants))) # 50#
        }#
        datx <- c(datx,seq(tbeg,tend,by=0.5))#
        daty <- c(daty,mvec)#
        avec <- c(avec,svec)#
        bvec <- c(bvec,evec)#
        gvec <- c(gvec,cvec)#
        fvec <- c(fvec,rep(featname[featnum],length(mvec)))#
        cvec2 <- c(cvec2,lvec)#
    }#
    dat.df <- data.frame(x=datx,y=daty,sd=avec,se=bvec,col=factor(gvec,levels=labcol),feat=fvec,clust=cvec2)#
    (n <- nrow(dat.df))#
    dat.df$feat <- factor(dat.df$feat, levels = featname)#
    subclus <- 1:max(dat)#
    dat2 <- subset(dat.df, clust %in% subclus)#
    p <- ggplot(data=dat2, aes(x=x, y=y)) +#
           geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
           facet_wrap(~feat, nrow=4, scales="free_y") +#
           geom_ribbon(aes(ymax=y+se,ymin=y-se,fill=factor(clust),alpha=0.2)) +#
           scale_fill_manual(values=subcol2) +#
           labs(x="time (sec)", y="", shape="", colour="", linetype="") +#
           theme_bw() +#
           theme(legend.position="none") +#
           theme(axis.title.x=element_text(size=fsize)) +#
           theme(axis.title.y=element_text(size=fsize,angle=90)) +#
           theme(strip.text=element_text(size=rel(lsize-0.4)))#
    print(p)#
    scan()#
    #################
    ## (e)#
    #################
    dat <- laball2$cluster.d3#
    subc <- c(2,6,8,13,17,21,25,28)#
    subcol2 <- labcol[subc]#
    numG <- 1:max(dat)#
    datx <- daty <- avec <- bvec <- fvec <- gvec <- cvec2 <- NULL#
    for (featnum in 1:nfeat) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[featnum]+1#
        end <- begi[featnum+1]#
        mvec <- svec <- evec <- kvec <- lvec <- cvec <- NULL#
        for (clusnum in numG) {#
            sel <- which(dat==clusnum)#
            meants <- apply(Znorm[sel,beg:end],2,mean)#
            sdts <- apply(Znorm[sel,beg:end],2,sd)#
            mvec <- c(mvec,meants)#
            svec <- c(svec,sdts)#
            evec <- c(evec,1.96*sdts/sqrt(length(sel)))#
            kvec <- c(kvec,rep(paste("C",sprintf("%02d",clusnum),sep=""),length(meants)))#
            cvec <- c(cvec,rep(labcol[clusnum],length(meants)))#
            lvec <- c(lvec,rep(clusnum,length(meants))) # 50#
        }#
        datx <- c(datx,seq(tbeg,tend,by=0.5))#
        daty <- c(daty,mvec)#
        avec <- c(avec,svec)#
        bvec <- c(bvec,evec)#
        gvec <- c(gvec,cvec)#
        fvec <- c(fvec,rep(featname[featnum],length(mvec)))#
        cvec2 <- c(cvec2,lvec)#
    }#
    dat.df <- data.frame(x=datx,y=daty,sd=avec,se=bvec,col=factor(gvec,levels=labcol),feat=fvec,clust=cvec2)#
    (n <- nrow(dat.df))#
    dat.df$feat <- factor(dat.df$feat, levels = featname)#
    subclus <- 1:max(dat)#
    dat2 <- subset(dat.df, clust %in% subclus)#
    p <- ggplot(data=dat2, aes(x=x, y=y)) +#
           geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
           facet_wrap(~feat, nrow=4, scales="free_y") +#
           geom_ribbon(aes(ymax=y+se,ymin=y-se,fill=factor(clust),alpha=0.2)) +#
           scale_fill_manual(values=subcol2) +#
           labs(x="time (sec)", y="", shape="", colour="", linetype="") +#
           theme_bw() +#
           theme(legend.position="none") +#
           theme(axis.title.x=element_text(size=fsize)) +#
           theme(axis.title.y=element_text(size=fsize,angle=90)) +#
           theme(strip.text=element_text(size=rel(lsize-0.4)))#
    print(p)#
}#
makeFigure3A <- function()#
{#
    n <- nrow(dat3A)#
    ctrl3A <- dat3A[48:57,3]#
    outc <- sapply(1:length(ctrl3A), function(x) which(ctrl3A[x]==laball2$linelab))#
    linename <- c(paste(dat3A[1:47,2],dat3A[1:47,3],sep="@"),as.character(dat3A[48:57,2]))#
    outline <- sapply(1:n,function(x)  which(paste(dat3A[x,2],dat3A[x,3],sep="@") == laball2$line.eff))#
    outline[48:n] <- outc#
    tabline <- ldply(outline, function(x) tabulate(laball2[x,"cluster.d5"],nbins=29))#
    outdish <- sapply(outline,function(x)  unique(laball2[x,"dish"]))#
    dishanim <- lapply(outdish, function(x) lapply(x, function(y) which(laball2$dish %in% y)))#
    tabdish <- llply(dishanim, function(x) ldply(x, function(y) tabulate(laball2[y,"cluster.d5"],nbins=29)))#
    names(tabdish) <- c(paste(dat3A[1:47,2],dat3A[1:47,3],sep="@"),as.character(dat3A[48:57,2]))#
    for (i in 1:length(tabdish)) {#
        rownames(tabdish[[i]]) <- as.character(outdish[[i]])#
    }#
    tabdish2 <- ldply(tabdish)#
    tmp <- tabdish2[,1]#
    tabdish2 <- tabdish2[,-1]#
    myorder <- sapply(1:length(linename), function(x) which(tmp %in% linename[x]))#
    labord <- c(rep(14,3), rep(13,4), rep(12,3), rep(11,4),rep(10,4),rep(9,4), rep(8,4), rep(7,3))#
    (behav <- behavname[labord])#
    ## mean for positive controls#
    sel <- c("R11F05","iav","R38A10","ppk")#
    sel3 <- c("11f05", "iav", "38a1", "ppk") # ppk1=101#
    sel2 <- c("proprioceptive\n (R11F05)",#
             "mechanosensory\n (iav)",#
             "nocicpetive\n (R38A10)",#
             "nocicpetive\n (ppk)")#
    numselP <- length(sel)#
    (selind <- match(sel,linename))#
    (nc3 <- sapply(myorder[selind],length))#
    numP <- nc3#
    (numP <- sapply(sel3,function(x) sum(laball2$ctrllab==x)))#
    numP[3] <- 205#
    numP[4] <- 101#
    (nc.y3 <- c(1,cumsum(nc3)+1))#
    y21 <- nc.y3[1]; y22 <- nc.y3[length(sel)+1]; (ny3 <- y22-y21+1)#
    dat <- tabdish2[unlist(myorder[selind])-1,]#
    dat <- t(apply(dat,1,function(x) x/sum(x)*100))#
    ndat <- nrow(dat)#
    ctype <- rep(linename[selind],sapply(myorder[selind],length))#
    meandatP <- matrix(sapply(linename[selind],function(x) colMeans(dat[ctype==x,])),nrow=length(selind),byrow=T)#
    linenameP <- sel2#
    rownames(meandatP) <- sel2#
    ## mean for positive controls#
    set.seed(12)#
    nlab <- "sample\n negative\n controls\n (pBDPU)"#
    nlab2 <- "negative\n controls\n (pBDPU)"#
    (selind <- grep("pBDPU",linename))#
    selN <- unlist(myorder[selind])#
    (nc3 <- length(selN))#
    (numN <- sum(laball2$linelab==1217)) # pbd1#
    smallerN <- sample(selN,ndat,rep=FALSE)#
    (nc3 <- length(smallerN))#
    numselN <- 1#
    (nc.y3 <- c(1,cumsum(nc3)+1))#
    y21 <- nc.y3[1]; y22 <- nc.y3[length(selind)+1]; (ny3 <- y22-y21+1)#
    dat <- tabdish2[smallerN-1,]#
    dat <- t(apply(dat,1,function(x) x/sum(x)*100))#
    range(dat[,8:14])#
    datN <- tabdish2[selN,]#
    datN <- t(apply(datN,1,function(x) x/sum(x)*100))#
    meandatN <- matrix(colMeans(datN),nrow=1)#
    linenameN <- nlab2#
    rownames(meandatN) <- nlab2#
    meandat <- rbind(meandatP,meandatN)#
    require(plyr)#
    dat3A2 <- dat3A2[c(1,6,5,7,3,4,2,12,11,9,10,8),]#
    selline <- sapply(1:nrow(dat3A2),function(x) which(paste(dat3A2[x,2],dat3A2[x,3],sep="@") == laball2$line.eff))#
    (n <- length(selline))#
    mctrl <- dat3A[48:57,2]#
    (mctrlind <- match(c("ppk","R38A10"), mctrl))#
    selline[n+(1:2)] <- outc[mctrlind]#
    (n <- length(selline))#
    sellinename <- sapply(selline,function(x) unique(laball2[x,"line.eff"]))#
    tabline <- ldply(selline, function(x) tabulate(laball2[x,"cluster.d5"],nbins=29))#
    outdish <- sapply(selline,function(x)  unique(laball2[x,"dish"]))#
    dishanim <- lapply(outdish, function(x) lapply(x, function(y) which(laball2$dish %in% y)))#
    tabdish <- llply(dishanim, function(x) ldply(x, function(y) tabulate(laball2[y,"cluster.d5"],nbins=29)))#
    names(tabdish) <- sellinename#
    for (i in 1:length(tabdish)) {#
        rownames(tabdish[[i]]) <- as.character(outdish[[i]])#
    }#
    tabdish[[n-1]] <- as.data.frame(matrix(colMeans(tabdish[[n-1]]),nrow=1))#
    tabdish[[n]] <- as.data.frame(matrix(colMeans(tabdish[[n]]),nrow=1))#
    tabdish2 <- ldply(tabdish)#
    tmp <- tabdish2[,1]#
    tabdish2 <- tabdish2[,-1]#
    myorder <- sapply(1:length(sellinename), function(x) which(tmp %in% sellinename[x]))#
    (selind <- 1:n)#
    nc3 <- sapply(myorder[selind],length)#
    (nc.y3 <- c(1,cumsum(nc3)+1))#
    y21 <- nc.y3[1]; y22 <- nc.y3[length(selind)+1]; (ny3 <- y22-y21+1)#
    dat <- tabdish2[unlist(myorder[selind]),]#
    dat <- t(apply(dat,1,function(x) x/sum(x)*100))#
    dishes <- c(clab,"none")#
    (nums <- sapply(1:length(dishes),function(x) sum(dishes[x]==dishinfo$ctrl)))#
    cl <- rep.int(1:length(dishes),nums)#
    cmat <- t(apply(cmat3A,1,function(x) x/sum(x)*100))#
    cmat <- cmat[dishid,]#
    (n <- nrow(cmat))#
    (d <- ncol(cmat))#
    dishes <- c(clab,"none")#
    (nums <- sapply(1:length(dishes),function(x) sum(dishes[x]==dishinfo$ctrl)))#
    cl <- rep.int(1:length(dishes),nums)#
    nsamp <- 30#
    set.seed(12345)#
    sub <- sample(which(dishinfo$ctrl=="none"),nsamp,replace=FALSE)#
    dishid <- sub#
    cmat <- t(apply(cmat,1,function(x) x/sum(x)*100))#
    d <- ncol(cmat)#
    newdat <- cmat[dishid,]#
    numT <- sapply(dishinfo[dishid,"line"],function(x) sum(laball2$linelab==x))#
    selT <- "sample novel\n test lines"#
    sel <- selT#
    ## combine mean of positive, negative, and 50 sampled test#
    meandat <- rbind(meandatP, meandatN, newdat)#
    (newn <- nrow(meandat))#
    sel3 <- c("meanP","meanN",sel)#
    numAll <- c(numP,numN,numT)#
    (nc3 <- c(nrow(meandatP),nrow(meandatN),nsamp))#
    (nc.y3 <- c(0,cumsum(nc3)+0.5))#
    y21 <- nc.y3[1]; y22 <- nc.y3[length(sel)+1]; (ny3 <- y22-y21+1)#
    op <- par(mar=c(3,7,1,1)+0.2,mgp=c(4,1,0))#
    image.plot(x=1:d,y=1:newn,z=t(meandat),col=mycol,#
               xlab="",ylab="",xaxt="n",yaxt="n",cex.lab=csize,zlim=c(0,40),#
               legend.args=list(text="probability of performing a behaviotype (%)",#
               col="black", cex=1.2, side=4, line=2))#
    for (i in y21:y22) {#
        abline(h=nc.y3[i],lwd=0.5,col="black")#
    }#
    box()#
    ticks <- 1:d#
    xname <- paste(ticks,behav,sep=": ")#
    ticks <- 1:d#
    ticks2 <- cumsum(c(7,7,8,7))+0.5#
    ticksm <- running(cumsum(c(1,c(7,7,8,7))),width=2,fun=mean)#
    par(xpd=TRUE)#
    for (x in ticks) rect(x-0.5,-1,x+0.5,0.5,col=labcol[x], border=NA)#
    box()#
    text(ticks,par("usr")[3]-0.7,labels=1:29,col="white", xpd=TRUE,cex=0.8,font=2)#
    text(ticksm,par("usr")[3]-2.2,labels=c("avoid","escape","backup","turn"),col=labcol[c(3,10,17,25)], xpd=TRUE,cex=1.5,font=2)#
    mtext("behaviotype",side=1,line=0,adj=0,at=30)#
    ticks <- running(nc.y3,width=2,fun=mean)#
    axis(side=2, at=ticks, labels=sel3,las=1,cex.axis=1);#
}#
makeFigure3B <- function()#
{#
    useNctrl <- c("pbd1")#
    usePctrl <- c("ppk1","38a1","11f0","iav1")#
    usectrl <- c(useNctrl,usePctrl)#
    (ctrlind <- match(usectrl,clab))#
    (ctrlcl <- 1:length(ctrlind))#
    (unused <- (1:length(clab))[-ctrlind])#
    ## ctrl ind#
    (cind <- sapply(usectrl,function(x) which(x==lineinfo$ctrl)))#
    ## test ind#
    tind0 <- testinfo$linelab#
    testcl <- testinfo$testcl#
    tind1 <- which(testcl<36) ## hits#
    tind2 <- which(testcl==36) ## non-hits#
    tind <- c(tind0[tind1],tind0[tind2])#
    testcl[tind1] <- length(cind)+1#
    testcl[tind2] <- length(cind)+2#
    mycol5 <- heat.colors(5)#
    cpall <- pall[1:11,1:11]#
    tmp <- matrix(0,11,1218)#
    tmp[1:11,1:11] <- cpall#
    tmp[1:11,12:1218] <- t(testPmeta[,1:11])#
    pall2 <- rbind(tmp,testPmeta)#
    tind0 <- (length(clab)+1):nrow(pall2)#
    tind1 <- which(pall2[1,]<=0.05)#
    tind <- setdiff(tind1,1:11)#
    testcl <- rep(length(cind)+2,length(tind0))#
    testcl[tind-length(clab)] <-length(cind)+1#
    cl <- c(ctrlcl, testcl)#
    pall2 <- pall2[-unused,-unused]#
    pall2[pall2==0] <- min(pall2[pall2!=0])#
    mybrks <- unique(round(sort(c(log10(0.05),seq(min(log10(pall2)),max(log10(pall2)),length.out=length(mycol5)))),1))#
    brklabs <- c(expression(10^-5),expression(10^-4),expression(10^-3),0.05,0.2,1)#
    pall3 <- log10(pall2)#
    nc <- 1 # length(usectrl)#
    xxx <- 10#
    cl2 <- c(rep(cl[1:nc],each=xxx),cl[-c(1:nc)])#
    idx <- c(rep(cl[1:nc],each=xxx),(nc+1):nrow(pall3))#
    pall4 <- pall3[idx,idx]#
    plotcolordist(cl2,pall4,mycol5,mybrk=mybrks,#
                  brklab=brklabs,na.col=mycol5[length(mycol5)],#
                  sortz=TRUE, tind=c(6,7),#
                  legend.args=list(text="p-value",#
                  col="black", cex=1.5, side=4, line=2.7))#
    mtext("hit lines", side=3, line=0.5, cex=1.5, at=492/2)#
    mtext("non-hit lines", side=3, line=0.5, cex=1.5, at=492+(1207-492)/2) # 0.3#
    mtext("non-hit lines", side=2, line=0.5, cex=1.5, at=(1207-492)/2)#
    mtext("hit lines", side=2, line=0.5, cex=1.5, at=(1207-492) + 492/2)#
    box(lwd=2)#
}#
makeFigure3C <- function()#
{#
    ##################
    ## Fig 3c#
    ##################
    pall[pall==0] <- min(pall[pall!=0])#
    nline <- nrow(pall)#
    mycol <- rev(cm.colors(5))#
    dishes <- c(clab,"none")#
    (nums <- sapply(1:length(dishes),function(x) sum(dishes[x]==lineinfo$ctrl)))#
    cl <- rep.int(1:length(dishes),nums)#
    dishpmat2[dishpmat2==0] <- min(dishpmat2[dishpmat2!=0])#
    usec <- c("pbd1","ppk1","38a1","iav1","11f0")#
    (useind <- sapply(usec, function(x) which(rownames(dishPmeta) == x)))#
    rownames(dishPmeta)[useind]#
    logp <- dishPmeta[useind,useind]#
    xname <- c("neg. \n controls","noci 1","noci 2","mechano","proprio")#
    rownames(logp) <- colnames(logp) <- xname#
    for (k in 5:0) logp[logp < 10^-k] <- k#
    mycol <- rev(heat.colors(5))#
    my.image2(logp,text.cex=0,round=2,labels=c(1,2),border="gray70",#
              col=mycol, upper.tri=FALSE, label.col="black",label.cex=2,srt=45,#
              mar=c(7,8,1,1))#
}#
makeFigure3DE <- function()#
{#
    ## (c)#
    dat <- cbind(dat3de,line.eff=paste0(dat3de$V1,"@",dat3de$V2))#
    linelab <- sapply(1:nrow(dat),function(x) as.character(unique(laball2[laball2$line.eff==paste0(dat[x,2],"@",dat[x,3]),"linelab"])))#
    cmat2 <- cmat3de[as.numeric(linelab),]#
    cmat2 <- t(apply(cmat2,1,function(x) x/sum(x)*100))#
    n <- nrow(cmat2)#
    d <- ncol(cmat2)#
    matchcl <- sapply(testdiffpbd1[,"line.eff"],function(x) laball2[which(laball2$line.eff %in% x),"cluster.d5"])#
    matchcl2 <- sapply(matchcl,function(x) table(x))#
    matchcl3 <- sapply(matchcl2, function(x) as.numeric(unlist(dimnames(x)))[which.max(x)])#
    mclust.order <- NULL#
    for (i in 1:max(matchcl3)) {#
        mclust.order <- append(mclust.order,which(matchcl3==i))#
    }#
    op <- par(mar=c(3,4,1,1)+0.2,mgp=c(4,1,0)) ## Reduced margins at top and left#
    image.plot(x=1:d,y=1:n,z=t(cmat2[mclust.order,]),col=mycol,xlab="",ylab="lines",xaxt="n",cex.lab=csize,cex.axis=lsize,zlim=c(0,40),#
                  legend.args=list(text="probability of performing a behaviotype (%)",#
                  col="black", cex=1.2, side=4, line=2))#
    nc <- table(matchcl3)#
    nc.y <- c(1,cumsum(nc)+1)#
    box()#
    ticks <- 1:29#
    ticksm <- running(cumsum(c(1,c(7,7,8,7))),width=2,fun=mean)#
    par(xpd=TRUE)#
    for (x in ticks) rect(x-0.5,-23,x+0.5,0.5,col=labcol[x], border=NA)#
    box()#
    text(ticks,par("usr")[3]-13,labels=1:29,col="white", xpd=TRUE,cex=0.8,font=2)#
    text(ticksm,par("usr")[3]-35,labels=c("avoid","escape","backup","turn"),col=labcol[c(3,10,17,25)], xpd=TRUE,cex=1.5,font=2)#
    mtext("'hit' test lines", side=2, line=2.5,cex=csize)#
    mtext("behaviotype",side=1,line=0,adj=0,at=30)#
    scan()#
    ## Fig 3E#
    dat2 <- melt(dat3e,id=c("thresh","H","threshv"))#
    names(dat2) <- c("linetype","hypothesis","threshv","pairs","ARI")#
    dat2 <- ddply(dat2, .(pairs,linetype), mutate, hA=ARI[hypothesis=="A"])#
    p <- ggplot(data=dat2, aes(x=ARI))#
    p <- p + facet_wrap(~pairs, nrow=4, scales="free_y")#
    p <- p + stat_density(aes(color=hypothesis),adjust=2,size=1,geom="line")#
    p <- p + geom_vline(aes(xintercept=hA,color=threshv),linetype="dashed",size=1)#
    p <- p + theme_bw()#
    p <- p + xlab("adjusted Rand index") + ylab("density of adjusted Rand index")#
    p <- p + theme(axis.title.x=element_text(size=fsize)) +#
            theme(axis.title.y=element_text(size=fsize,angle=90)) +#
            theme(strip.text=element_text(size=rel(lsize-0.4)))#
    p <- p + labs(color="data")#
    p <- p + scale_color_manual(labels=c("permuted","observed"),values=c(1,2))#
    print(p)#
}#
makeFigure4A <- function()#
{#
    dat4a <- dat4a[!(is.na(dat4a[,1])),]#
    dat4a <- dat4a[rev(1:nrow(dat4a)),]#
    (behnum <- rev((table(dat4a[,"behavior"])[c("turn-turn","backup","escape","avoid")])))#
    selline <- sapply(1:nrow(dat4a),function(x) which(paste(dat4a[x,"line.Youngser"],dat4a[x,"effector"],sep="@") == laball2$line.eff))#
    (n <- length(selline))#
    sapply(selline,length)#
    sellinename <- sapply(selline,function(x) unique(laball2[x,"line.eff"]))#
    tabline <- ldply(selline, function(x) tabulate(laball2[x,"cluster.d5"],nbins=29))#
    outdish <- sapply(selline,function(x)  unique(laball2[x,"dish"]))#
    dishanim <- lapply(outdish, function(x) lapply(x, function(y) which(laball2$dish %in% y)))#
    tabdish <- llply(dishanim, function(x) ldply(x, function(y) tabulate(laball2[y,"cluster.d5"],nbins=29)))#
    names(tabdish) <- sellinename#
    for (i in 1:length(tabdish)) {#
        rownames(tabdish[[i]]) <- as.character(outdish[[i]])#
    }#
    for (i in 1:n) {#
        tabdish[[i]] <- as.data.frame(matrix(colMeans(tabdish[[i]]),nrow=1))#
    }#
    tabdish2 <- ldply(tabdish)#
    tmp <- tabdish2[,1]#
    tabdish2 <- tabdish2[,-1]#
    myorder <- sapply(1:length(sellinename), function(x) which(tmp %in% sellinename[x]))#
    (selind <- 1:n)#
    nc3 <- sapply(myorder[selind],length)#
    (nc.y3 <- c(1,cumsum(nc3)+1))#
    y21 <- nc.y3[1]; y22 <- nc.y3[length(selind)+1]; (ny3 <- y22-y21+1)#
    dat <- tabdish2[unlist(myorder[selind]),]#
    dat <- t(apply(dat,1,function(x) x/sum(x)*100))#
    op <- par(mar=c(3,5.5,1,1)+0.2,mgp=c(4,1,0)) ## Reduced margins at top and left#
    image.plot(x=1:29,y=1:ny3,z=t(dat),col=mycol,#
               xlab="",ylab="",xaxt="n",yaxt="n",cex.lab=csize,zlim=c(0,50),#
               legend.args=list(text="probability of performing a behaviotype (%)",#
               col="black", cex=1.2, side=4, line=2))#
    sub <- cumsum(behnum)+1#
    for (i in y21:y22) {#
        abline(h=nc.y3[i],lwd=0.5,col="black")#
        if (i %in% sub) abline(h=nc.y3[i],lwd=3,col="black")#
    }#
    box()#
    ticks <- 1:29#
    axis(side=1, at=ticks, labels=FALSE)#
    ticks2 <- cumsum(c(7,7,8,7))+0.5#
    ticksm <- running(cumsum(c(1,c(7,7,8,7))),width=2,fun=mean)#
    par(xpd=TRUE)#
    for (x in ticks) rect(x-0.5,1,x+0.5,0.4,col=labcol[x], border=NA)#
    box()#
    text(ticks,par("usr")[3]-0.3,labels=1:29,col="white", xpd=TRUE,cex=0.8,font=2)#
    text(ticksm,par("usr")[3]-1,labels=c("avoid","escape","backup","turn"),col=labcol[c(3,10,17,25)], xpd=TRUE,cex=1.5,font=2)#
    mtext("behaviotype",side=1,line=0,adj=0,at=30)#
    ticks <- running(nc.y3,width=2,fun=mean)#
    lname <- as.character(dat4a[,"line.figure.name"])#
    lcol <- rep(labcol[c(3,10,17,25)],behnum)#
    lcol <- c(lcol,"black")#
    for (i in 1:length(ticks)) {#
        axis(side=2, at=ticks[i], labels=lname[i],las=1,cex.axis=1,col.ticks=lcol[i],col.axis=lcol[i],font=2)#
    }#
}#
makeSuppS1toS4 <- function()#
{#
    depth <- 3#
    dat <- laball2$cluster.d3#
    numG <- 1:max(dat)#
    subcol <- labcol#
    datx <- daty <- avec <- bvec <- fvec <- gvec <- cvec2 <- NULL#
    for (featnum in 1:nfeat) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[featnum]+1#
        end <- begi[featnum+1]#
        mvec <- svec <- evec <- kvec <- lvec <- cvec <- NULL#
        for (clusnum in numG) {#
            sel <- which(dat==clusnum)#
            meants <- apply(Znorm[sel,beg:end],2,mean)#
            sdts <- apply(Znorm[sel,beg:end],2,sd)#
            mvec <- c(mvec,meants)#
            svec <- c(svec,sdts)#
            evec <- c(evec,1.96*sdts/sqrt(length(sel)))#
            kvec <- c(kvec,rep(paste("C",sprintf("%02d",clusnum),sep=""),length(meants)))#
            cvec <- c(cvec,rep(labcol[clusnum],length(meants)))#
            lvec <- c(lvec,rep(clusnum,length(meants))) # 50#
        }#
        datx <- c(datx,seq(tbeg,tend,by=0.5))#
        daty <- c(daty,mvec)#
        avec <- c(avec,svec)#
        bvec <- c(bvec,evec)#
        gvec <- c(gvec,cvec)#
        fvec <- c(fvec,rep(featname[featnum],length(mvec)))#
        cvec2 <- c(cvec2,lvec)#
    }#
    dat.df <- data.frame(x=datx,y=daty,sd=avec,se=bvec,col=factor(gvec,levels=labcol),feat=fvec,clust=cvec2)#
    (n <- nrow(dat.df))#
    dat.df$feat <- factor(dat.df$feat, levels = featname)#
    clustplot <- function(subclus,b1,b2) {#
        dat2 <- subset(dat.df, clust %in% subclus)#
        branch <- c(2,6,8,13,17,21,25,28)#
        (subc <- branch[subclus])#
        subcol2 <- subcol[subc]#
        x1 <- 30; x2 <- 60; x3 <- 70#
        rects <- data.frame(xstart = c(x1,x2), xend = c(x2,x3), col = letters[1:2])#
        p <- ggplot(data=dat2, aes(x=x, y=y)) +#
            geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
            facet_wrap(~feat, nrow=4, scales="free_y") +#
            geom_ribbon(aes(ymax=y+se,ymin=y-se,fill=factor(clust),alpha=0.2)) +#
            scale_fill_manual(values=subcol2) +#
            labs(x="time (sec)", y="response", shape="", colour="", linetype="") +#
            theme_bw() +#
            theme(legend.position="none") +#
            theme(axis.title.x=element_text(size=fsize)) +#
            theme(axis.title.y=element_text(size=fsize,angle=90)) +#
            theme(strip.text=element_text(size=rel(lsize-0.4)))#
        p#
    }#
    print(clustplot(1:2, 7, 8)); scan()#
    print(clustplot(3:4, 9, 10)); scan()#
    print(clustplot(5:6, 11, 12)); scan()#
    print(clustplot(7:8, 13, 14))#
}#
makeSuppS5A <- function()#
{#
    ctrlname <- c("38a","ppk","iav")#
    drawTrial <- function(cname) {#
        trial4 <- trial4list[[cname]]#
        trial4 <- cbind(1:nrow(trial4),trial4)#
        colnames(trial4) <- rep("",ncol(trial4))#
        ## shuffle rows#
        set.seed(12345)#
        ind <- sample(nrow(trial4))#
        trial4[,1] <- ind#
        idx <- running(2:ncol(trial4),by=4,width=4,fun=function(x) x, simplify=TRUE)#
        trial4.m <- trial4[,1:5]#
        for (i in 2:29) {#
            mat <- cbind(trial4[,1],trial4[,idx[,i]])#
            trial4.m <- rbind(trial4.m,mat)#
        }#
        colnames(trial4.m) <- c("id","T1","T2","T3","T4")#
        trial4.m <- as.data.frame(trial4.m)#
        trial4.m$cl <- rep(1:29,each=nrow(trial4))#
        trial4.m$T2[trial4.m$T2>0] <- 2#
        trial4.m$T3[trial4.m$T3>0] <- 3#
        trial4.m$T4[trial4.m$T4>0] <- 4#
        ## swap cl(6,7) -> cl(12,13)#
        trial4.m$cl[trial4.m$cl==6] <- 66#
        trial4.m$cl[trial4.m$cl==7] <- 77#
        trial4.m$cl[trial4.m$cl==12] <- 1212#
        trial4.m$cl[trial4.m$cl==13] <- 1313#
        trial4.m$cl[trial4.m$cl==66] <- 12#
        trial4.m$cl[trial4.m$cl==77] <- 13#
        trial4.m$cl[trial4.m$cl==1212] <- 6#
        trial4.m$cl[trial4.m$cl==1313] <- 7#
        trial4.m2 <- melt(trial4.m,id=c("id","cl"),value.name="trial")#
        trial4.m2$trial <- factor(trial4.m2$trial,labels=c("trial 0", "trial 1", "trial 2", "trial 3", "trial 4"))#
        greyv <- grey(0:10/10)[10]#
        p <- ggplot(trial4.m2, aes(variable,id,fill=trial)) +#
            geom_tile(data = subset(trial4.m2,trial!="trial 0"), aes(fill = trial),alpha=1) +#
            geom_tile(data = subset(trial4.m2,trial=="trial 0"), color=greyv,fill="white",alpha=1) +#
            facet_grid(. ~ cl) +#
            theme(axis.text.x=element_blank()) +#
            xlab("behaviotype") + ylab("animal")#
        p <- p + labs(fill="") + #theme_bw() +#
            theme(strip.text=element_text(size=rel(0.4)))#
        p#
    }#
    print(drawTrial(ctrlname[1])); scan()#
    print(drawTrial(ctrlname[2])); scan()#
    print(drawTrial(ctrlname[3]))#
}#
makeSuppS5B <- function()#
{#
    ctrl <- c("pBDPU","noci 2", "mechano", "proprio")#
    ctrl2 <- c("pbd1","38a1","iav1","11f0")#
    hits <- c("R46D01","R44H03")#
    hits2 <- c("46D01","44H03")#
    hitgr <- sapply(hits2, function(x) glob2rx(paste0("*",x,"*ppk*")))#
    subj <- c(ctrl2,hits)#
    subjname <- c(ctrl,hits)#
    subjctrl <- sapply(ctrl2, function(x) grep(x,labTall$ctrl))#
    subjhits <- lapply(hitgr, function(x) grep(x,as.character(labTall$line.eff)))#
    names(subjhits) <- hits#
    subjlines <- c(subjctrl,subjhits)#
    linetabC <- linetabT <- NULL#
    KhatC <- 29; KhatT <- 32#
    for (i in 1:length(subjctrl)) {#
        dat <- labTall[subjctrl[[i]],c("T1","T2","T3","T4")]#
        mat <- matrix(0,nrow(dat),KhatC)#
        for (j in 1:nrow(mat)) {#
            tmp <- as.numeric(dat[j,])#
            for (k in 1:4) {#
                mat[j,tmp[k]] <- mat[j,tmp[k]] + 1#
            }#
        }#
        linetabC[[i]] <- mat#
    }#
    for (i in 1:length(subjhits)) {#
        dat <- labTall[subjhits[[i]],c("T1","T2","T3","T4")]#
        mat <- matrix(0,nrow(dat),KhatT)#
        for (j in 1:nrow(mat)) {#
            tmp <- as.numeric(dat[j,])#
            for (k in 1:4) {#
                mat[j,tmp[k]] <- mat[j,tmp[k]] + 1#
            }#
        }#
        linetabT[[i]] <- mat#
    }#
    linetab <- c(linetabC,linetabT)#
    names(linetab) <- subj#
    (n <- length(outS5B))#
    (nv <- sapply(outS5B,function(x) x$n))#
    xmax <- 20#
    (pvec <- sapply(outS5B,function(x) x$n4)) #c(17,12,4)#
    df <- data.frame(line=paste0(subjname[1]," (N = ",nv[1],")"),probability=outS5B[[1]]$H0[1:xmax])#
    for (i in 2:n) {#
        df1 <- data.frame(line=paste0(subjname[i]," (N = ",nv[i],")"),probability=outS5B[[i]]$H0[1:xmax])#
        df <- rbind(df,df1)#
    }#
    dat2 <- df#
    dat2$x <- rep(seq(1,xmax),n)#
    dat2$max <- rep(pvec,each=xmax)#
    fsize <- 14; lsize <- 1#
    p <- ggplot(data=dat2, aes(x=x,y=probability))#
    p <- p + facet_wrap(~line, nrow=3, scales="free")#
    p <- p + geom_line(aes(color=line))#
    p <- p + geom_vline(aes(xintercept=max),linetype="dashed")#
    p <- p + theme_bw() + xlab("# animals expected to perform the same behaviotype on all 4 trials")#
    p <- p + theme(legend.position="none")#
    p <- p + theme(axis.title.x=element_text(size=fsize)) +#
             theme(axis.title.y=element_text(size=fsize,angle=90)) +#
             theme(strip.text=element_text(size=rel(lsize)))#
    print(p)#
}#
makeSuppS6AB <- function()#
{#
    animid <- c(140,12,148,147)#
    mydish <- c("20101123_124517","20110513_134910","20100826_100515","20100826_101729")#
    lname <- c("GMR_65B06_AE_01","GMR_38A10_AE_01","GMR_22D10_AE_01","GMR_68D02_AE_01")#
    ename <- c("UAS_ChRh2_23_0011","UAS_ppkGAL80_ChR2_23_0015","UAS_ChRh2_23_0011","UAS_ChRh2_23_0011")#
    linelab <- c(882,513,256,927)#
    ctrllab <- c("test","38a10","test","test")#
    anim4 <- data.frame(id=animid,dish=mydish,line=lname,eff=ename,linelab=linelab,ctrllab=ctrllab)#
    behav <- c(17,18)#
    fnum <- 2 # "forward/backward crawling bias"#
    df <- NULL#
    for (dnum in 1:length(animid)) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[fnum]+1#
        end <- begi[fnum+1]#
        sel1 <- which(laball2$animid==animid[dnum])#
        sel2 <- which(laball2$dish==mydish[dnum])#
        sel3 <- which(laball2$line==lname[dnum])#
        sel4 <- which(laball2$effector==ename[dnum])#
        sel <- Reduce(intersect, list(sel1,sel2,sel3,sel4))#
        dat <- matrix(Znorm[sel,beg:end],nrow=length(sel)) # behav#
#        dat <- Znorm[laball2$dish==mydish[dnum],beg:end]#
        meants <- apply(dat,2,mean)#
        sdts <- apply(dat,2,sd)#
        evec <- 1.96*sdts/sqrt(nrow(dat))#
        daty <- as.vector(t(dat))#
        datx <- seq(tbeg,tend,by=0.5)#
        avec <- rep(1:nrow(dat),each=ncol(dat))#
        fvec <- rep(featname[fnum],length(dat))#
        cvec <- rep("grey",length(dat))#
        datd <- animid[dnum]#
        dat.df <- data.frame(x=datx,y=daty,anim=factor(avec),feat=fvec,col=cvec,dish=datd)#
        df <- rbind(df,dat.df)#
    }#
    (n <- nrow(df))#
    df$feat <- factor(df$feat, levels = featname)#
    df$dish <- factor(df$dish, levels = animid) ## animid#
    p <- ggplot(data=df, aes(x=x, y=y)) +#
           geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
           facet_wrap(~dish, nrow=2) +#
           geom_line(aes(colour=col, group=anim, alpha=0.5)) +#
           labs(x="time (sec)", y="response", shape="", colour="", linetype="") +#
           theme_bw() +#
           theme(legend.position="none") +#
           theme(axis.title.x=element_text(size=fsize)) +#
           theme(axis.title.y=element_text(size=fsize,angle=90)) +#
           theme(strip.text=element_text(size=rel(lsize-0.4)))#
    p <- p + scale_color_manual(values=rep("grey",n))#
    print(p)#
    scan()#
    fnum <- 2 # "forward/backward crawling bias"#
    df <- NULL#
    for (dnum in 1:length(behav)) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[fnum]+1#
        end <- begi[fnum+1]#
        sel <- which(laball2$cluster.d5==behav[dnum])#
        dat <- matrix(Znorm[sel,beg:end],nrow=length(sel)) # behav#
        meants <- apply(dat,2,mean)#
        sdts <- apply(dat,2,sd)#
        evec <- 1.96*sdts/sqrt(nrow(dat))#
        daty <- as.vector(t(dat))#
        datx <- seq(tbeg,tend,by=0.5)#
        avec <- rep(1:nrow(dat),each=ncol(dat))#
        fvec <- rep(featname[fnum],length(dat))#
        cvec <- rep("grey",length(dat))#
        datd <- behav[dnum]#
        dat.df <- data.frame(x=datx,y=daty,y2=meants,se=evec,anim=factor(avec),feat=fvec,col=cvec,dish=datd)#
        df <- rbind(df,dat.df)#
    }#
    (n <- nrow(df))#
    df$feat <- factor(df$feat, levels = featname)#
    df$dish <- factor(df$dish, levels = behav) ## animid#
    lab1718 <- labcol[behav]#
    p2 <- ggplot(data=df, aes(x=x, y=y2)) +#
           geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
           facet_wrap(~dish, nrow=2) + #, scales="free_y") +#
           geom_ribbon(aes(ymax=y2+se,ymin=y2-se,fill=factor(dish),alpha=0.2)) +#
           scale_fill_manual(values=lab1718) +#
           labs(x="time (sec)", y="response", shape="", colour="", linetype="") +#
           theme_bw() +#
           theme(legend.position="none") +#
           theme(axis.title.x=element_text(size=fsize)) +#
           theme(axis.title.y=element_text(size=fsize,angle=90)) +#
           theme(strip.text=element_text(size=rel(lsize-0.4)))#
    print(p2)#
}#
plotcolordist <- function(mout,mdsz,mycol,na.col=mycol[1],mybrk=NULL,brklab=NULL,corder="cl",testcl=NULL,xlab="",ylab="",border=FALSE,legend.args=NULL,sortz=FALSE,tind=c(1,2),fake=FALSE,hits=NULL,nonhits=NULL,...)#
{#
    if (is.vector(mout)) cvec <- mout#
    else cvec <- mout$class#
    mclust.order <- NULL#
    for (i in 1:max(cvec)) {#
        ord <- which(cvec==i)#
        if (sortz) { ## sort 1st row/column#
            if (i %in% tind) { ## for hits and non-hits#
                tmp <- mdsz[1,ord]#
                ind <- order(tmp)#
                ord <- ord[ind]#
            }#
        }#
        mclust.order <- append(mclust.order,ord)#
    }#
    if (!is.null(testcl)) {#
        ## assume that the test is the last group#
        testgroup <- which(cvec==max(cvec))#
        test.order <- NULL#
        for (i in 1:max(testcl)) {#
            test.order <- append(test.order,(min(testgroup)-1)+which(testcl==i))#
        }#
        mclust.order[testgroup] <- test.order#
    }#
    if (ncol(mdsz)==nrow(mdsz)) {#
        zdist <- mdsz#
    } else {#
        zdist <- as.matrix(dist(mdsz))#
    }#
    if (is.null(mybrk)) {#
        mybrk <- seq(min(min(zdist),0),max(max(zdist),1),length.out=length(mycol)+1)#
        if (is.null(brklab)) {#
            brklab <- round(mybrk,1)#
        }#
    }#
    n <- nrow(zdist)#
    newzdist <- zdist[mclust.order,mclust.order]#
    if (fake) {#
        cat("faking...\n")#
        htab <- cumsum(table(cvec))#
        hind <- (htab[tind[1]-1]+1):htab[tind[1]]#
        nind <- (htab[tind[2]-1]+1):htab[tind[2]]#
        min1 <- min(newzdist[1,])#
        logrrr <- log10(hits);#
        logrrr[logrrr== -Inf] <- min1; logrrr[logrrr<min1] <- min1#
        logsss <- log10(nonhits);#
        logsss[logsss== -Inf] <- min1#
        logsss[logsss<min1] <- min1#
        newzdist[1,hind] <- sort(logrrr)#
        newzdist[1,nind] <- sort(logsss)#
        newzdist[,1] <- rev(newzdist[1,])#
    }#
    cmat <- dmat.color(newzdist,mycol) # was 5#
    newzdist <- newzdist[1:n,n:1]#
    image.plot(x=1:n,y=1:n,z=newzdist,col=mycol,xaxt="n",yaxt="n",xlab=xlab,ylab=ylab,breaks=mybrk,lab.breaks=brklab,cex.lab=csize,legend.args=legend.args)#
    plotcolors(cmat,na.color=na.col,add=T)#
    ## add boxes around clusters for d40#
    if (border) {#
        nc <- table(cvec)#
        nc.x <- c(1,cumsum(nc)+1)#
        nc.y <- c(nrow(mdsz),nrow(mdsz)-cumsum(nc)+1)#
        for (i in 1:max(cvec)) {#
            x1 <- nc.x[i]; x2 <- nc.x[i+1]#
            y1 <- nc.y[i]; y2 <- nc.y[i+1]#
            polygon(c(x1,x1,x2,x2), c(y1,y2,y2,y1),border=1,lwd=2)#
        }#
        if (!is.null(testcl)) {#
            nc2 <- table(testcl)#
            nc2.x <- min(testgroup)-1 + c(1,cumsum(nc2)+1)#
            nc2.y <- c(nrow(mdsz),nrow(mdsz)-cumsum(nc2)+1) - min(testgroup)#
            for (i in 1:max(testcl)) {#
                x1 <- nc2.x[i]; x2 <- nc2.x[i+1]#
                y1 <- nc2.y[i]; y2 <- nc2.y[i+1]#
                polygon(c(x1,x1,x2,x2), c(y1,y2,y2,y1),border=4,lwd=2)#
            }#
        }#
    }#
    box()#
}#
my.image2 <- function (x, col = c("white", rev(heat.colors(23))), breaks,#
                       log = TRUE, border = NA, box.offset = 0.1, round = 3, cex,#
                       text.cex = 1, text.col = "black", label.col = "black",#
                       mar = c(1, 3, 3, 1),#
                       labels = 2:3, upper.tri = FALSE, diag.lab = NULL,#
                       label.offset = 0.1, label.cex = 1, srt = 90)#
{#
    if (!is.matrix(x)) {#
        x <- t(as.matrix(x))#
    }#
    if (!missing(cex)) {#
#        text.cex = cex#
        label.cex = cex#
    }#
    op <- par(mar = mar, xpd = TRUE)#
    x <- x[nrow(x):1, , drop = FALSE]#
    x1 <- ncol(x)#
    y1 <- nrow(x)#
    if (length(col) == 1) {#
        col <- rep(col, 3)#
    }#
    if (length(col) == 2) {#
        col <- c(col, col[-1])#
    }#
    if (missing(breaks)) {#
        breaks <- length(col) - 1#
    }#
    else {#
        if (length(breaks) != length(col)) {#
            warning("Breaks is not the same length as colors.\nSome blocks may be unfilled or some colors may not be used")#
        }#
    }#
    checkmin <- min(x, na.rm = TRUE)#
    if (checkmin < 0) {#
        x <- x - checkmin#
    }#
    missingNA <- is.na(x)#
    x[x == 0] <- NA#
    if (log) {#
        z <- cut(log10(x), breaks)#
    }#
    else {#
        z <- cut(x, breaks)#
    }#
    z2 <- matrix(z, y1, x1)#
    x[is.na(x)] <- 0#
    x[missingNA] <- NA#
    if (checkmin < 0) {#
        x <- x + checkmin#
    }#
    x <- round(x, round)#
    offset <- box.offset/2#
    plot(seq(1, x1 + 1, len = 2), seq(1, y1 + 1, len = 2), type = "n",#
        axes = FALSE, ann = FALSE, xaxs = "i", yaxs = "i")#
    for (i in 1:x1) {#
        for (j in 1:y1) {#
            if (upper.tri & (i+j <= nrow(x))) next#
            if (!is.null(diag.lab) & (i+j-1==nrow(x))) next#
            if (is.na(z2[j, i])) {#
                n1 <- 1#
            }#
            else {#
                n1 <- match(z2[j, i], levels(z)) + 1#
            }#
            rect(i + offset, j + offset, i + 1 - offset, j +#
                1 - offset, border = border, col = col[n1])#
            if (!is.na(text.col)) {#
                if (text.cex!=0)#
                    text(i + 0.5, j + 0.5, x[j, i], cex = text.cex,#
                         col = text.col)#
            }#
        }#
    }#
    if (2 %in% labels) {#
        if (is.null(diag.lab))#
            text(1 - label.offset, 1:y1 + 0.5, rownames(x), pos = 2,#
                 offset = 0, cex = label.cex, col=label.col)#
        else#
            text(x1:1 + 1 - label.offset, 1:y1 + 0.5, rownames(x), pos = 2,#
                 offset = 0, cex = label.cex, col=label.col)#
    }#
    if (4 %in% labels)#
        text(x1 + 1 + label.offset, 1:y1 + 0.5, rownames(x),#
            pos = 4, offset = 0, cex = label.cex, col=label.col)#
    if (1 %in% labels)#
        text(1:x1 + 0.5, 0.9 - label.offset, colnames(x), pos = 2,#
            offset = 0, srt = (0 + srt), cex = label.cex, col=label.col)#
    if (3 %in% labels)#
        text(1:x1 + 0.8, y1 + 1.1 + label.offset, colnames(x), , col=label.col,#
            pos = 2, offset = 0, srt = (360 - srt), cex = label.cex)#
    par(op)#
}#
#generateFigures <- function()#
#{#
    ## load data#
    filename <- url("http://www.cis.jhu.edu/~parky/Behaviotypes/Codes/behaviotypes-data.Rbin")#
    cat("loading the required data...\n")#
    load(filename)#
    cat("Please hit RETURN at each prompt!\n")#
    cat("(Note that some of the figures take long to be drawn...)\n")#
    makeFigure1(); scan()#
    makeFigure2A(); scan()#
    makeFigure2B(); scan()#
    makeFigure2CF(); scan()#
    makeFigure2DE(); scan()#
    makeFigure3A(); scan()#
    makeFigure3B(); scan()#
    makeFigure3C(); scan()#
    makeFigure3DE(); scan()#
    makeFigure4A(); scan()#
    makeSuppS1toS4(); scan()#
    makeSuppS5A(); scan()#
    makeSuppS5B(); scan()#
    makeSuppS6AB()#
    cat("Done!\n")#
#}
require(devtools) || install.packages("devtools")#
require(ggplot2) || install.packages("ggplot2")#
require(RColorBrewer) || install.packages("RColorBrewer")#
require(flexclust) || install.packages("flexclust")#
#require(ggphylo) || install.packages("ggphylo")#
require(ggphylo) || install_github("gjuggler/ggphylo",build_vignettes=FALSE)#
require(plyr) || install.packages("plyr")#
require(fields) || install.packages("fields")#
require(gtools) || install.packages("gtools")#
require(gclus) || install.packages("gclus")#
require(popbio) || install.packages("popbio")#
require(reshape2) || install.packages("reshape2")
fsize <- 21#
lsize <- 1.4#
csize <- 1.7#
shadecol <- "#DEEBF7" ## light blue#
tbeg <- 0#
tend <- 39#
stend <- 30#
theme_set(theme_bw(base_size = fsize))#
theme_set(theme_grey(base_size = fsize))#
mycol <- colorRampPalette(c("white","lightblue","darkblue","black"))(100)#
## other variables#
clab <- c("pbd1","pbd2","pbd3","ppk1","ppk2","iav1","61d0","38a1","38a2","20c0","11f0")#
featname <- c("area (a.u.)",#
              "forward/backward crawling bias",#
              "head turn (deg)",#
              "sideways movement speed (mm/sec)",#
              "direction of motion",#
              "length (a.u.)",#
              "width (a.u.)",#
              "speed (mm/sec)")#
nfeat <- length(featname)
makeFigure1 <- function()#
{#
    ## (b)#
    mydish <- "20101217_131413"#
    datx <- daty <- avec <- fvec <- cvec <- NULL#
    for (featnum in 1:nfeat) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[featnum]+1#
        end <- begi[featnum+1]#
        dat <- Znorm[laball2$dish==mydish,beg:end]#
        daty <- c(daty,as.vector(t(dat)))#
        datx <- c(datx,seq(tbeg,tend,by=0.5))#
        avec <- c(avec,rep(1:nrow(dat),each=ncol(dat)))#
        fvec <- c(fvec,rep(featname[featnum],length(dat)))#
        cvec <- c(cvec,rep("grey",length(dat)))#
    }#
    dat.df <- data.frame(x=datx,y=daty,anim=factor(avec),feat=fvec,col=cvec)#
    n <- nrow(dat.df)#
    dat.df$feat <- factor(dat.df$feat, levels = featname)#
    p <- ggplot(data=dat.df, aes(x=x, y=y)) +#
           geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
           facet_wrap(~feat, nrow=4, scales="free_y") +#
           geom_line(aes(colour=col, group=anim, alpha=0.5)) +#
           labs(x="time (sec)", y="response", shape="", colour="", linetype="") +#
           theme_bw() +#
           theme(legend.position="none") +#
           theme(axis.title.x=element_text(size=fsize)) +#
           theme(axis.title.y=element_text(size=fsize,angle=90)) +#
           theme(strip.text=element_text(size=rel(lsize-0.4)))#
    p <- p + scale_color_manual(values=rep("grey",n))#
    print(p)#
}#
makeFigure2A <- function()#
{#
    #################
    ## (a)#
    #################
    mydish <- "20101217_131413"#
    datx <- daty <- avec <- fvec <- cvec <- NULL#
    set.seed(12345)#
    samp <- sample(nrow(Znorm),1000,rep=FALSE)#
    for (featnum in 1:nfeat) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[featnum]+1#
        end <- begi[featnum+1]#
        dat <- Znorm[samp,beg:end]#
        daty <- c(daty,as.vector(t(dat)))#
        datx <- c(datx,seq(tbeg,tend,by=0.5))#
        avec <- c(avec,rep(1:nrow(dat),each=ncol(dat)))#
        fvec <- c(fvec,rep(featname[featnum],length(dat)))#
        cvec <- c(cvec,rep("grey",length(dat)))#
    }#
    dat.df <- data.frame(x=datx,y=daty,anim=factor(avec),feat=fvec,col=cvec)#
    (n <- nrow(dat.df))#
    dat.df$feat <- factor(dat.df$feat, levels = featname)#
    p <- ggplot(data=dat.df, aes(x=x, y=y)) +#
           geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
           facet_wrap(~feat, nrow=4, scales="free_y") +#
           geom_line(aes(colour=col, group=anim, alpha=0.5)) +#
           labs(x="time (sec)", y="", shape="", colour="", linetype="") +#
           theme_bw() +#
           theme(legend.position="none") +#
           theme(axis.title.x=element_text(size=fsize)) +#
           theme(axis.title.y=element_text(size=fsize,angle=90)) +#
           theme(strip.text=element_text(size=rel(lsize-0.4)))#
    p <- p + scale_color_manual(values=rep("grey",n))#
    print(p)#
}#
makeFigure2B <- function()#
{#
    #################
    ## (b)#
    #################
    cl <- laball2$cluster.d5#
    (khat <- max(cl))#
    (tt <- table(cl))#
    (samp <- as.integer(tt/min(tt)))#
    meanZ <- t(sapply(1:khat, function(x) colMeans(mdsz[cl==x,])))#
    min2 <- lapply(1:khat, function(x) {#
        sel3 <- which(cl==x);#
        delta <- dist2(mdsz[sel3,], meanZ[x,])#
        sel3[order(delta)[1:samp[x]]]#
    })#
    sel2 <- unlist(min2)#
    mdsz2 <- mdsz[sel2,]#
    dmat <- as.matrix(dist(mdsz2))#
    dmat[dmat>1] <- 1#
    dmat[dmat==max(dmat)] <- 1#
    newcl <- rep(1:khat,times=samp)#
    col5 <- rev(cm.colors(5))#
    set.seed(12345)#
    ord <- sample(1:nrow(dmat),rep=FALSE)#
    par(mar=c(4,2,3,2)+0.1) ## Reduced margins at top and left#
    plotcolordist(newcl,dmat[ord,ord],col5,border=FALSE,#
                  legend.args=list(text="interpoint dissimilarity",#
                  col="black", cex=1.3, side=4, line=2.5))#
    mtext("animal responses", side=3, line=0.5,cex=1.5)#
    mtext("animal responses", side=2, line=0.5, cex=1.5)#
}#
makeFigure2CF <- function()#
{#
    #################
    ## (c)#
    #################
    z31<-"(692,(1995,2763) 4758) 5450"#
    z32<-"((2515,1190) 3705,(3487,1603) 5090) 8795"#
    z33<-"((398,1157) 1555, 113) 1668"#
    z34<-"((1210,2225) 3435,(1037,244) 1281) 4716"#
    z35<-"((895,295) 1190,(661,441) 1102) 2292"#
    z36<-"((266,34) 300,(63,31) 94) 394"#
    z37<-"((1995,1371) 3366,(2748,3783) 6531) 9897"#
    z38<-"(425,(2305,1838) 4143) 4568"#
    z21 <- paste("(",z31,",",z32,")","14245")#
    z22 <- paste("(",z33,",",z34,")","6384")#
    z23 <- paste("(",z35,",",z36,")","2686")#
    z24 <- paste("(",z37,",",z38,")","14465")#
    z1 <- paste("(",z21,",",z22,")","20629")#
    z2 <- paste("(",z23,",",z24,")","17151")#
    z <- paste("(",z1,",",z2,")","37780",";")#
    mytree <- read.tree(text=z)#
    G <- length(mytree$tip.label)#
    sizes <- c(as.numeric(mytree$tip.label),as.numeric(mytree$node.label))#
    for (i in nodes(mytree)) {#
        mytree <- tree.set.tag(mytree, i, 'sizes', sizes[i])#
        mytree <- tree.set.tag(mytree, i, 'sizes', sizes[i])#
    }#
    plot.args <- list(#
                  mytree,#
                  node.size.by='sizes',#
                  node.size.scale = scale_size_continuous(limits=c(0, 40000), range=c(1, 5)),#
                  line.size.by='sizes',#
                  legend.position=c(6,15), # no effect!#
                  label.size=5,#
                  label.color=labcol#
                  )#
    p <- do.call(ggphylo, plot.args) + theme(legend.position="none")#
    p <- p + xlim(-0.2,6.5) + ylim(0,31) + xlab("tree depth level")#
    p <- p + theme(axis.title.x=element_text(size=fsize))#
    pp <- p + theme(axis.title.x=element_text(size=fsize))#
    xmin <- 5.7; xmax <- 6.1#
    for (i in 1:29) {#
        pp <- pp +#
        geom_rect(data=NULL, xmin=xmin, xmax=xmax, ymin=i-0.5, ymax=i+0.5, fill=labcol[i], color="black", alpha=0.5)#
        pp <- pp +#
        geom_text(data=NULL,x=5.9,y=i,label=i,color="white",size=4)#
    }#
    pp <- pp + theme(axis.ticks = element_blank(), axis.text.y = element_blank(), axis.title.y=element_blank())#
    pp <- pp + annotate("text",x=6.4,y=15.0,label="statistically distinguishable behaviotypes",angle=90,size=6)#
    pp <- pp + annotate("text",x=5.3,y=30.5,label="# animals",angle=0,size=4)#
    print(pp)#
    scan()#
    #################
    ## (f)#
    #################
    labs1 <- c("slow", "fast")#
    labs2 <- c("turners", "still or back-up",#
               "escape", "turn-avoid")#
    labs3 <- c("turn-turn-turn", "turn-slow-crawl",#
               "still", "back-up",#
               "wiggle-escape", "straight-escape",#
               "right-left-avoid", "left-right-avoid")#
    labs <- c(labs1,labs2,labs3)#
    labpos <- matrix(c(0.5,23.3, 0.5,8.3,#
                       1.5,27, 1.5,19.3, 1.5,11.75, 1.5,4.45,#
                       2.5,28.45, 2.5,25.22, 2.5,21.15, 2.5,17.2,#
                       2.5,13.2, 2.5,9.95, 2.5,6.2, 2.5,2.5),#
                     ncol=2, byrow=T)#
    labsize <- c(rep(3,length(labs1)),#
                 rep(2.5,length(labs2)),#
                 rep(2,length(labs3))) * 2.5#
    labcol1 <- rev(colorRampPalette(brewer.pal(11,"Reds"))(20))[1:7]#
    labcol2 <- rev(colorRampPalette(brewer.pal(11,"Oranges"))(20))[1:7]#
    labcol3 <- rev(colorRampPalette(brewer.pal(11,"PuBu"))(20))[1:8]#
    labcol4 <- rev(colorRampPalette(brewer.pal(11,"Greens"))(20))[1:7]#
    labcol11 <- labcol1[1:3]; labcol12 <- labcol1[4:7]#
    labcol21 <- labcol2[1:4]; labcol22 <- labcol2[5:7]#
    labcol1 <- c(labcol11,labcol21)#
    labcol2 <- c(labcol12,labcol22)#
    labcol <- c(labcol1,rev(labcol2),labcol3,rev(labcol4))#
    bcol <- c(labcol3[8], labcol1[7],#
              labcol4[3], labcol3[4], labcol2[3], labcol1[3],#
              labcol4[2], labcol4[5], labcol3[6], labcol3[3],#
              labcol2[2], labcol2[6], labcol1[6], labcol1[2])#
    p2 <- p + geom_text(data=NULL,x=labpos[1,1],y=labpos[1,2],label=labs[1],color=labcol3[8],size=labsize[1]) +#
      geom_text(data=NULL,x=labpos[2,1],y=labpos[2,2],label=labs[2],color=labcol1[7],size=labsize[2]) +#
      geom_text(data=NULL,x=labpos[3,1],y=labpos[3,2],label=labs[3],color=labcol4[3],size=labsize[3]) +#
      geom_text(data=NULL,x=labpos[4,1],y=labpos[4,2],label=labs[4],color=labcol3[4],size=labsize[4]) +#
      geom_text(data=NULL,x=labpos[5,1],y=labpos[5,2],label=labs[5],color=labcol2[3],size=labsize[5]) +#
      geom_text(data=NULL,x=labpos[6,1],y=labpos[6,2],label=labs[6],color=labcol1[3],size=labsize[6]) +#
      geom_text(data=NULL,x=labpos[7,1],y=labpos[7,2],label=labs[7],color=labcol4[2],size=labsize[7]) +#
      geom_text(data=NULL,x=labpos[8,1],y=labpos[8,2],label=labs[8],color=labcol4[5],size=labsize[8]) +#
      geom_text(data=NULL,x=labpos[9,1],y=labpos[9,2],label=labs[9],color=labcol3[6],size=labsize[9]) +#
      geom_text(data=NULL,x=labpos[10,1],y=labpos[10,2],label=labs[10],color=labcol3[3],size=labsize[10]) +#
      geom_text(data=NULL,x=labpos[11,1],y=labpos[11,2],label=labs[11],color=labcol2[2],size=labsize[11]) +#
      geom_text(data=NULL,x=labpos[12,1],y=labpos[12,2],label=labs[12],color=labcol2[6],size=labsize[12]) +#
      geom_text(data=NULL,x=labpos[13,1],y=labpos[13,2],label=labs[13],color=labcol1[6],size=labsize[13]) +#
      geom_text(data=NULL,x=labpos[14,1],y=labpos[14,2],label=labs[14],color=labcol1[2],size=labsize[14])#
    p2 <- p2 + theme(axis.title.x=element_text(size=fsize))#
    p3 <- p2#
    xmin <- 5.7; xmax <- 6.1#
    for (i in 1:29) {#
        p3 <- p3 +#
        geom_rect(data=NULL, xmin=xmin, xmax=xmax, ymin=i-0.5, ymax=i+0.5, fill=labcol[i], color="black", alpha=0.5)#
    }#
    p4 <- p3#
    for (i in 1:29) {#
        p4 <- p4 +#
        geom_text(data=NULL,x=5.9,y=i,label=i,color="white",size=4)#
    }#
    p4 <- p4 + theme(axis.ticks = element_blank(), axis.text.y = element_blank(), axis.title.y=element_blank())#
    p4 <- p4 + annotate("text",x=1.5,y=31.0,label="'post-hoc' human labels",angle=0,size=6)#
    p4 <- p4 + annotate("text",x=5.3,y=30.5,label="# animals",angle=0,size=4)#
    p5 <- p4 + annotate("text",x=6.4,y=15.0,label="statistically distinguishable behaviotypes",angle=90,size=6)#
    print(p5)#
}#
makeFigure2DE <- function()#
{#
    #################
    ## (d)#
    #################
    dat <- laball2$cluster.d5#
    subc <- 1:max(dat)#
    subcol2 <- labcol[subc]#
    numG <- 1:max(dat)#
    datx <- daty <- avec <- bvec <- fvec <- gvec <- cvec2 <- NULL#
    for (featnum in 1:nfeat) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[featnum]+1#
        end <- begi[featnum+1]#
        mvec <- svec <- evec <- kvec <- lvec <- cvec <- NULL#
        for (clusnum in numG) {#
            sel <- which(dat==clusnum)#
            meants <- apply(Znorm[sel,beg:end],2,mean)#
            sdts <- apply(Znorm[sel,beg:end],2,sd)#
            mvec <- c(mvec,meants)#
            svec <- c(svec,sdts)#
            evec <- c(evec,1.96*sdts/sqrt(length(sel)))#
            kvec <- c(kvec,rep(paste("C",sprintf("%02d",clusnum),sep=""),length(meants)))#
            cvec <- c(cvec,rep(labcol[clusnum],length(meants)))#
            lvec <- c(lvec,rep(clusnum,length(meants))) # 50#
        }#
        datx <- c(datx,seq(tbeg,tend,by=0.5))#
        daty <- c(daty,mvec)#
        avec <- c(avec,svec)#
        bvec <- c(bvec,evec)#
        gvec <- c(gvec,cvec)#
        fvec <- c(fvec,rep(featname[featnum],length(mvec)))#
        cvec2 <- c(cvec2,lvec)#
    }#
    dat.df <- data.frame(x=datx,y=daty,sd=avec,se=bvec,col=factor(gvec,levels=labcol),feat=fvec,clust=cvec2)#
    (n <- nrow(dat.df))#
    dat.df$feat <- factor(dat.df$feat, levels = featname)#
    subclus <- 1:max(dat)#
    dat2 <- subset(dat.df, clust %in% subclus)#
    p <- ggplot(data=dat2, aes(x=x, y=y)) +#
           geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
           facet_wrap(~feat, nrow=4, scales="free_y") +#
           geom_ribbon(aes(ymax=y+se,ymin=y-se,fill=factor(clust),alpha=0.2)) +#
           scale_fill_manual(values=subcol2) +#
           labs(x="time (sec)", y="", shape="", colour="", linetype="") +#
           theme_bw() +#
           theme(legend.position="none") +#
           theme(axis.title.x=element_text(size=fsize)) +#
           theme(axis.title.y=element_text(size=fsize,angle=90)) +#
           theme(strip.text=element_text(size=rel(lsize-0.4)))#
    print(p)#
    scan()#
    #################
    ## (e)#
    #################
    dat <- laball2$cluster.d3#
    subc <- c(2,6,8,13,17,21,25,28)#
    subcol2 <- labcol[subc]#
    numG <- 1:max(dat)#
    datx <- daty <- avec <- bvec <- fvec <- gvec <- cvec2 <- NULL#
    for (featnum in 1:nfeat) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[featnum]+1#
        end <- begi[featnum+1]#
        mvec <- svec <- evec <- kvec <- lvec <- cvec <- NULL#
        for (clusnum in numG) {#
            sel <- which(dat==clusnum)#
            meants <- apply(Znorm[sel,beg:end],2,mean)#
            sdts <- apply(Znorm[sel,beg:end],2,sd)#
            mvec <- c(mvec,meants)#
            svec <- c(svec,sdts)#
            evec <- c(evec,1.96*sdts/sqrt(length(sel)))#
            kvec <- c(kvec,rep(paste("C",sprintf("%02d",clusnum),sep=""),length(meants)))#
            cvec <- c(cvec,rep(labcol[clusnum],length(meants)))#
            lvec <- c(lvec,rep(clusnum,length(meants))) # 50#
        }#
        datx <- c(datx,seq(tbeg,tend,by=0.5))#
        daty <- c(daty,mvec)#
        avec <- c(avec,svec)#
        bvec <- c(bvec,evec)#
        gvec <- c(gvec,cvec)#
        fvec <- c(fvec,rep(featname[featnum],length(mvec)))#
        cvec2 <- c(cvec2,lvec)#
    }#
    dat.df <- data.frame(x=datx,y=daty,sd=avec,se=bvec,col=factor(gvec,levels=labcol),feat=fvec,clust=cvec2)#
    (n <- nrow(dat.df))#
    dat.df$feat <- factor(dat.df$feat, levels = featname)#
    subclus <- 1:max(dat)#
    dat2 <- subset(dat.df, clust %in% subclus)#
    p <- ggplot(data=dat2, aes(x=x, y=y)) +#
           geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
           facet_wrap(~feat, nrow=4, scales="free_y") +#
           geom_ribbon(aes(ymax=y+se,ymin=y-se,fill=factor(clust),alpha=0.2)) +#
           scale_fill_manual(values=subcol2) +#
           labs(x="time (sec)", y="", shape="", colour="", linetype="") +#
           theme_bw() +#
           theme(legend.position="none") +#
           theme(axis.title.x=element_text(size=fsize)) +#
           theme(axis.title.y=element_text(size=fsize,angle=90)) +#
           theme(strip.text=element_text(size=rel(lsize-0.4)))#
    print(p)#
}#
makeFigure3A <- function()#
{#
    n <- nrow(dat3A)#
    ctrl3A <- dat3A[48:57,3]#
    outc <- sapply(1:length(ctrl3A), function(x) which(ctrl3A[x]==laball2$linelab))#
    linename <- c(paste(dat3A[1:47,2],dat3A[1:47,3],sep="@"),as.character(dat3A[48:57,2]))#
    outline <- sapply(1:n,function(x)  which(paste(dat3A[x,2],dat3A[x,3],sep="@") == laball2$line.eff))#
    outline[48:n] <- outc#
    tabline <- ldply(outline, function(x) tabulate(laball2[x,"cluster.d5"],nbins=29))#
    outdish <- sapply(outline,function(x)  unique(laball2[x,"dish"]))#
    dishanim <- lapply(outdish, function(x) lapply(x, function(y) which(laball2$dish %in% y)))#
    tabdish <- llply(dishanim, function(x) ldply(x, function(y) tabulate(laball2[y,"cluster.d5"],nbins=29)))#
    names(tabdish) <- c(paste(dat3A[1:47,2],dat3A[1:47,3],sep="@"),as.character(dat3A[48:57,2]))#
    for (i in 1:length(tabdish)) {#
        rownames(tabdish[[i]]) <- as.character(outdish[[i]])#
    }#
    tabdish2 <- ldply(tabdish)#
    tmp <- tabdish2[,1]#
    tabdish2 <- tabdish2[,-1]#
    myorder <- sapply(1:length(linename), function(x) which(tmp %in% linename[x]))#
    labord <- c(rep(14,3), rep(13,4), rep(12,3), rep(11,4),rep(10,4),rep(9,4), rep(8,4), rep(7,3))#
    (behav <- behavname[labord])#
    ## mean for positive controls#
    sel <- c("R11F05","iav","R38A10","ppk")#
    sel3 <- c("11f05", "iav", "38a1", "ppk") # ppk1=101#
    sel2 <- c("proprioceptive\n (R11F05)",#
             "mechanosensory\n (iav)",#
             "nocicpetive\n (R38A10)",#
             "nocicpetive\n (ppk)")#
    numselP <- length(sel)#
    (selind <- match(sel,linename))#
    (nc3 <- sapply(myorder[selind],length))#
    numP <- nc3#
    (numP <- sapply(sel3,function(x) sum(laball2$ctrllab==x)))#
    numP[3] <- 205#
    numP[4] <- 101#
    (nc.y3 <- c(1,cumsum(nc3)+1))#
    y21 <- nc.y3[1]; y22 <- nc.y3[length(sel)+1]; (ny3 <- y22-y21+1)#
    dat <- tabdish2[unlist(myorder[selind])-1,]#
    dat <- t(apply(dat,1,function(x) x/sum(x)*100))#
    ndat <- nrow(dat)#
    ctype <- rep(linename[selind],sapply(myorder[selind],length))#
    meandatP <- matrix(sapply(linename[selind],function(x) colMeans(dat[ctype==x,])),nrow=length(selind),byrow=T)#
    linenameP <- sel2#
    rownames(meandatP) <- sel2#
    ## mean for positive controls#
    set.seed(12)#
    nlab <- "sample\n negative\n controls\n (pBDPU)"#
    nlab2 <- "negative\n controls\n (pBDPU)"#
    (selind <- grep("pBDPU",linename))#
    selN <- unlist(myorder[selind])#
    (nc3 <- length(selN))#
    (numN <- sum(laball2$linelab==1217)) # pbd1#
    smallerN <- sample(selN,ndat,rep=FALSE)#
    (nc3 <- length(smallerN))#
    numselN <- 1#
    (nc.y3 <- c(1,cumsum(nc3)+1))#
    y21 <- nc.y3[1]; y22 <- nc.y3[length(selind)+1]; (ny3 <- y22-y21+1)#
    dat <- tabdish2[smallerN-1,]#
    dat <- t(apply(dat,1,function(x) x/sum(x)*100))#
    range(dat[,8:14])#
    datN <- tabdish2[selN,]#
    datN <- t(apply(datN,1,function(x) x/sum(x)*100))#
    meandatN <- matrix(colMeans(datN),nrow=1)#
    linenameN <- nlab2#
    rownames(meandatN) <- nlab2#
    meandat <- rbind(meandatP,meandatN)#
    require(plyr)#
    dat3A2 <- dat3A2[c(1,6,5,7,3,4,2,12,11,9,10,8),]#
    selline <- sapply(1:nrow(dat3A2),function(x) which(paste(dat3A2[x,2],dat3A2[x,3],sep="@") == laball2$line.eff))#
    (n <- length(selline))#
    mctrl <- dat3A[48:57,2]#
    (mctrlind <- match(c("ppk","R38A10"), mctrl))#
    selline[n+(1:2)] <- outc[mctrlind]#
    (n <- length(selline))#
    sellinename <- sapply(selline,function(x) unique(laball2[x,"line.eff"]))#
    tabline <- ldply(selline, function(x) tabulate(laball2[x,"cluster.d5"],nbins=29))#
    outdish <- sapply(selline,function(x)  unique(laball2[x,"dish"]))#
    dishanim <- lapply(outdish, function(x) lapply(x, function(y) which(laball2$dish %in% y)))#
    tabdish <- llply(dishanim, function(x) ldply(x, function(y) tabulate(laball2[y,"cluster.d5"],nbins=29)))#
    names(tabdish) <- sellinename#
    for (i in 1:length(tabdish)) {#
        rownames(tabdish[[i]]) <- as.character(outdish[[i]])#
    }#
    tabdish[[n-1]] <- as.data.frame(matrix(colMeans(tabdish[[n-1]]),nrow=1))#
    tabdish[[n]] <- as.data.frame(matrix(colMeans(tabdish[[n]]),nrow=1))#
    tabdish2 <- ldply(tabdish)#
    tmp <- tabdish2[,1]#
    tabdish2 <- tabdish2[,-1]#
    myorder <- sapply(1:length(sellinename), function(x) which(tmp %in% sellinename[x]))#
    (selind <- 1:n)#
    nc3 <- sapply(myorder[selind],length)#
    (nc.y3 <- c(1,cumsum(nc3)+1))#
    y21 <- nc.y3[1]; y22 <- nc.y3[length(selind)+1]; (ny3 <- y22-y21+1)#
    dat <- tabdish2[unlist(myorder[selind]),]#
    dat <- t(apply(dat,1,function(x) x/sum(x)*100))#
    dishes <- c(clab,"none")#
    (nums <- sapply(1:length(dishes),function(x) sum(dishes[x]==dishinfo$ctrl)))#
    cl <- rep.int(1:length(dishes),nums)#
    cmat <- t(apply(cmat3A,1,function(x) x/sum(x)*100))#
    cmat <- cmat[dishid,]#
    (n <- nrow(cmat))#
    (d <- ncol(cmat))#
    dishes <- c(clab,"none")#
    (nums <- sapply(1:length(dishes),function(x) sum(dishes[x]==dishinfo$ctrl)))#
    cl <- rep.int(1:length(dishes),nums)#
    nsamp <- 30#
    set.seed(12345)#
    sub <- sample(which(dishinfo$ctrl=="none"),nsamp,replace=FALSE)#
    dishid <- sub#
    cmat <- t(apply(cmat,1,function(x) x/sum(x)*100))#
    d <- ncol(cmat)#
    newdat <- cmat[dishid,]#
    numT <- sapply(dishinfo[dishid,"line"],function(x) sum(laball2$linelab==x))#
    selT <- "sample novel\n test lines"#
    sel <- selT#
    ## combine mean of positive, negative, and 50 sampled test#
    meandat <- rbind(meandatP, meandatN, newdat)#
    (newn <- nrow(meandat))#
    sel3 <- c("meanP","meanN",sel)#
    numAll <- c(numP,numN,numT)#
    (nc3 <- c(nrow(meandatP),nrow(meandatN),nsamp))#
    (nc.y3 <- c(0,cumsum(nc3)+0.5))#
    y21 <- nc.y3[1]; y22 <- nc.y3[length(sel)+1]; (ny3 <- y22-y21+1)#
    op <- par(mar=c(3,7,1,1)+0.2,mgp=c(4,1,0))#
    image.plot(x=1:d,y=1:newn,z=t(meandat),col=mycol,#
               xlab="",ylab="",xaxt="n",yaxt="n",cex.lab=csize,zlim=c(0,40),#
               legend.args=list(text="probability of performing a behaviotype (%)",#
               col="black", cex=1.2, side=4, line=2))#
    for (i in y21:y22) {#
        abline(h=nc.y3[i],lwd=0.5,col="black")#
    }#
    box()#
    ticks <- 1:d#
    xname <- paste(ticks,behav,sep=": ")#
    ticks <- 1:d#
    ticks2 <- cumsum(c(7,7,8,7))+0.5#
    ticksm <- running(cumsum(c(1,c(7,7,8,7))),width=2,fun=mean)#
    par(xpd=TRUE)#
    for (x in ticks) rect(x-0.5,-1,x+0.5,0.5,col=labcol[x], border=NA)#
    box()#
    text(ticks,par("usr")[3]-0.7,labels=1:29,col="white", xpd=TRUE,cex=0.8,font=2)#
    text(ticksm,par("usr")[3]-2.2,labels=c("avoid","escape","backup","turn"),col=labcol[c(3,10,17,25)], xpd=TRUE,cex=1.5,font=2)#
    mtext("behaviotype",side=1,line=0,adj=0,at=30)#
    ticks <- running(nc.y3,width=2,fun=mean)#
    axis(side=2, at=ticks, labels=sel3,las=1,cex.axis=1);#
}#
makeFigure3B <- function()#
{#
    useNctrl <- c("pbd1")#
    usePctrl <- c("ppk1","38a1","11f0","iav1")#
    usectrl <- c(useNctrl,usePctrl)#
    (ctrlind <- match(usectrl,clab))#
    (ctrlcl <- 1:length(ctrlind))#
    (unused <- (1:length(clab))[-ctrlind])#
    ## ctrl ind#
    (cind <- sapply(usectrl,function(x) which(x==lineinfo$ctrl)))#
    ## test ind#
    tind0 <- testinfo$linelab#
    testcl <- testinfo$testcl#
    tind1 <- which(testcl<36) ## hits#
    tind2 <- which(testcl==36) ## non-hits#
    tind <- c(tind0[tind1],tind0[tind2])#
    testcl[tind1] <- length(cind)+1#
    testcl[tind2] <- length(cind)+2#
    mycol5 <- heat.colors(5)#
    cpall <- pall[1:11,1:11]#
    tmp <- matrix(0,11,1218)#
    tmp[1:11,1:11] <- cpall#
    tmp[1:11,12:1218] <- t(testPmeta[,1:11])#
    pall2 <- rbind(tmp,testPmeta)#
    tind0 <- (length(clab)+1):nrow(pall2)#
    tind1 <- which(pall2[1,]<=0.05)#
    tind <- setdiff(tind1,1:11)#
    testcl <- rep(length(cind)+2,length(tind0))#
    testcl[tind-length(clab)] <-length(cind)+1#
    cl <- c(ctrlcl, testcl)#
    pall2 <- pall2[-unused,-unused]#
    pall2[pall2==0] <- min(pall2[pall2!=0])#
    mybrks <- unique(round(sort(c(log10(0.05),seq(min(log10(pall2)),max(log10(pall2)),length.out=length(mycol5)))),1))#
    brklabs <- c(expression(10^-5),expression(10^-4),expression(10^-3),0.05,0.2,1)#
    pall3 <- log10(pall2)#
    nc <- 1 # length(usectrl)#
    xxx <- 10#
    cl2 <- c(rep(cl[1:nc],each=xxx),cl[-c(1:nc)])#
    idx <- c(rep(cl[1:nc],each=xxx),(nc+1):nrow(pall3))#
    pall4 <- pall3[idx,idx]#
    plotcolordist(cl2,pall4,mycol5,mybrk=mybrks,#
                  brklab=brklabs,na.col=mycol5[length(mycol5)],#
                  sortz=TRUE, tind=c(6,7),#
                  legend.args=list(text="p-value",#
                  col="black", cex=1.5, side=4, line=2.7))#
    mtext("hit lines", side=3, line=0.5, cex=1.5, at=492/2)#
    mtext("non-hit lines", side=3, line=0.5, cex=1.5, at=492+(1207-492)/2) # 0.3#
    mtext("non-hit lines", side=2, line=0.5, cex=1.5, at=(1207-492)/2)#
    mtext("hit lines", side=2, line=0.5, cex=1.5, at=(1207-492) + 492/2)#
    box(lwd=2)#
}#
makeFigure3C <- function()#
{#
    ##################
    ## Fig 3c#
    ##################
    pall[pall==0] <- min(pall[pall!=0])#
    nline <- nrow(pall)#
    mycol <- rev(cm.colors(5))#
    dishes <- c(clab,"none")#
    (nums <- sapply(1:length(dishes),function(x) sum(dishes[x]==lineinfo$ctrl)))#
    cl <- rep.int(1:length(dishes),nums)#
    dishpmat2[dishpmat2==0] <- min(dishpmat2[dishpmat2!=0])#
    usec <- c("pbd1","ppk1","38a1","iav1","11f0")#
    (useind <- sapply(usec, function(x) which(rownames(dishPmeta) == x)))#
    rownames(dishPmeta)[useind]#
    logp <- dishPmeta[useind,useind]#
    xname <- c("neg. \n controls","noci 1","noci 2","mechano","proprio")#
    rownames(logp) <- colnames(logp) <- xname#
    for (k in 5:0) logp[logp < 10^-k] <- k#
    mycol <- rev(heat.colors(5))#
    my.image2(logp,text.cex=0,round=2,labels=c(1,2),border="gray70",#
              col=mycol, upper.tri=FALSE, label.col="black",label.cex=2,srt=45,#
              mar=c(7,8,1,1))#
}#
makeFigure3DE <- function()#
{#
    ## (c)#
    dat <- cbind(dat3de,line.eff=paste0(dat3de$V1,"@",dat3de$V2))#
    linelab <- sapply(1:nrow(dat),function(x) as.character(unique(laball2[laball2$line.eff==paste0(dat[x,2],"@",dat[x,3]),"linelab"])))#
    cmat2 <- cmat3de[as.numeric(linelab),]#
    cmat2 <- t(apply(cmat2,1,function(x) x/sum(x)*100))#
    n <- nrow(cmat2)#
    d <- ncol(cmat2)#
    matchcl <- sapply(testdiffpbd1[,"line.eff"],function(x) laball2[which(laball2$line.eff %in% x),"cluster.d5"])#
    matchcl2 <- sapply(matchcl,function(x) table(x))#
    matchcl3 <- sapply(matchcl2, function(x) as.numeric(unlist(dimnames(x)))[which.max(x)])#
    mclust.order <- NULL#
    for (i in 1:max(matchcl3)) {#
        mclust.order <- append(mclust.order,which(matchcl3==i))#
    }#
    op <- par(mar=c(3,4,1,1)+0.2,mgp=c(4,1,0)) ## Reduced margins at top and left#
    image.plot(x=1:d,y=1:n,z=t(cmat2[mclust.order,]),col=mycol,xlab="",ylab="lines",xaxt="n",cex.lab=csize,cex.axis=lsize,zlim=c(0,40),#
                  legend.args=list(text="probability of performing a behaviotype (%)",#
                  col="black", cex=1.2, side=4, line=2))#
    nc <- table(matchcl3)#
    nc.y <- c(1,cumsum(nc)+1)#
    box()#
    ticks <- 1:29#
    ticksm <- running(cumsum(c(1,c(7,7,8,7))),width=2,fun=mean)#
    par(xpd=TRUE)#
    for (x in ticks) rect(x-0.5,-23,x+0.5,0.5,col=labcol[x], border=NA)#
    box()#
    text(ticks,par("usr")[3]-13,labels=1:29,col="white", xpd=TRUE,cex=0.8,font=2)#
    text(ticksm,par("usr")[3]-35,labels=c("avoid","escape","backup","turn"),col=labcol[c(3,10,17,25)], xpd=TRUE,cex=1.5,font=2)#
    mtext("'hit' test lines", side=2, line=2.5,cex=csize)#
    mtext("behaviotype",side=1,line=0,adj=0,at=30)#
    scan()#
    ## Fig 3E#
    dat2 <- melt(dat3e,id=c("thresh","H","threshv"))#
    names(dat2) <- c("linetype","hypothesis","threshv","pairs","ARI")#
    dat2 <- ddply(dat2, .(pairs,linetype), mutate, hA=ARI[hypothesis=="A"])#
    p <- ggplot(data=dat2, aes(x=ARI))#
    p <- p + facet_wrap(~pairs, nrow=4, scales="free_y")#
    p <- p + stat_density(aes(color=hypothesis),adjust=2,size=1,geom="line")#
    p <- p + geom_vline(aes(xintercept=hA,color=threshv),linetype="dashed",size=1)#
    p <- p + theme_bw()#
    p <- p + xlab("adjusted Rand index") + ylab("density of adjusted Rand index")#
    p <- p + theme(axis.title.x=element_text(size=fsize)) +#
            theme(axis.title.y=element_text(size=fsize,angle=90)) +#
            theme(strip.text=element_text(size=rel(lsize-0.4)))#
    p <- p + labs(color="data")#
    p <- p + scale_color_manual(labels=c("permuted","observed"),values=c(1,2))#
    print(p)#
}#
makeFigure4A <- function()#
{#
    dat4a <- dat4a[!(is.na(dat4a[,1])),]#
    dat4a <- dat4a[rev(1:nrow(dat4a)),]#
    (behnum <- rev((table(dat4a[,"behavior"])[c("turn-turn","backup","escape","avoid")])))#
    selline <- sapply(1:nrow(dat4a),function(x) which(paste(dat4a[x,"line.Youngser"],dat4a[x,"effector"],sep="@") == laball2$line.eff))#
    (n <- length(selline))#
    sapply(selline,length)#
    sellinename <- sapply(selline,function(x) unique(laball2[x,"line.eff"]))#
    tabline <- ldply(selline, function(x) tabulate(laball2[x,"cluster.d5"],nbins=29))#
    outdish <- sapply(selline,function(x)  unique(laball2[x,"dish"]))#
    dishanim <- lapply(outdish, function(x) lapply(x, function(y) which(laball2$dish %in% y)))#
    tabdish <- llply(dishanim, function(x) ldply(x, function(y) tabulate(laball2[y,"cluster.d5"],nbins=29)))#
    names(tabdish) <- sellinename#
    for (i in 1:length(tabdish)) {#
        rownames(tabdish[[i]]) <- as.character(outdish[[i]])#
    }#
    for (i in 1:n) {#
        tabdish[[i]] <- as.data.frame(matrix(colMeans(tabdish[[i]]),nrow=1))#
    }#
    tabdish2 <- ldply(tabdish)#
    tmp <- tabdish2[,1]#
    tabdish2 <- tabdish2[,-1]#
    myorder <- sapply(1:length(sellinename), function(x) which(tmp %in% sellinename[x]))#
    (selind <- 1:n)#
    nc3 <- sapply(myorder[selind],length)#
    (nc.y3 <- c(1,cumsum(nc3)+1))#
    y21 <- nc.y3[1]; y22 <- nc.y3[length(selind)+1]; (ny3 <- y22-y21+1)#
    dat <- tabdish2[unlist(myorder[selind]),]#
    dat <- t(apply(dat,1,function(x) x/sum(x)*100))#
    op <- par(mar=c(3,5.5,1,1)+0.2,mgp=c(4,1,0)) ## Reduced margins at top and left#
    image.plot(x=1:29,y=1:ny3,z=t(dat),col=mycol,#
               xlab="",ylab="",xaxt="n",yaxt="n",cex.lab=csize,zlim=c(0,50),#
               legend.args=list(text="probability of performing a behaviotype (%)",#
               col="black", cex=1.2, side=4, line=2))#
    sub <- cumsum(behnum)+1#
    for (i in y21:y22) {#
        abline(h=nc.y3[i],lwd=0.5,col="black")#
        if (i %in% sub) abline(h=nc.y3[i],lwd=3,col="black")#
    }#
    box()#
    ticks <- 1:29#
    axis(side=1, at=ticks, labels=FALSE)#
    ticks2 <- cumsum(c(7,7,8,7))+0.5#
    ticksm <- running(cumsum(c(1,c(7,7,8,7))),width=2,fun=mean)#
    par(xpd=TRUE)#
    for (x in ticks) rect(x-0.5,1,x+0.5,0.4,col=labcol[x], border=NA)#
    box()#
    text(ticks,par("usr")[3]-0.3,labels=1:29,col="white", xpd=TRUE,cex=0.8,font=2)#
    text(ticksm,par("usr")[3]-1,labels=c("avoid","escape","backup","turn"),col=labcol[c(3,10,17,25)], xpd=TRUE,cex=1.5,font=2)#
    mtext("behaviotype",side=1,line=0,adj=0,at=30)#
    ticks <- running(nc.y3,width=2,fun=mean)#
    lname <- as.character(dat4a[,"line.figure.name"])#
    lcol <- rep(labcol[c(3,10,17,25)],behnum)#
    lcol <- c(lcol,"black")#
    for (i in 1:length(ticks)) {#
        axis(side=2, at=ticks[i], labels=lname[i],las=1,cex.axis=1,col.ticks=lcol[i],col.axis=lcol[i],font=2)#
    }#
}#
makeSuppS1toS4 <- function()#
{#
    depth <- 3#
    dat <- laball2$cluster.d3#
    numG <- 1:max(dat)#
    subcol <- labcol#
    datx <- daty <- avec <- bvec <- fvec <- gvec <- cvec2 <- NULL#
    for (featnum in 1:nfeat) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[featnum]+1#
        end <- begi[featnum+1]#
        mvec <- svec <- evec <- kvec <- lvec <- cvec <- NULL#
        for (clusnum in numG) {#
            sel <- which(dat==clusnum)#
            meants <- apply(Znorm[sel,beg:end],2,mean)#
            sdts <- apply(Znorm[sel,beg:end],2,sd)#
            mvec <- c(mvec,meants)#
            svec <- c(svec,sdts)#
            evec <- c(evec,1.96*sdts/sqrt(length(sel)))#
            kvec <- c(kvec,rep(paste("C",sprintf("%02d",clusnum),sep=""),length(meants)))#
            cvec <- c(cvec,rep(labcol[clusnum],length(meants)))#
            lvec <- c(lvec,rep(clusnum,length(meants))) # 50#
        }#
        datx <- c(datx,seq(tbeg,tend,by=0.5))#
        daty <- c(daty,mvec)#
        avec <- c(avec,svec)#
        bvec <- c(bvec,evec)#
        gvec <- c(gvec,cvec)#
        fvec <- c(fvec,rep(featname[featnum],length(mvec)))#
        cvec2 <- c(cvec2,lvec)#
    }#
    dat.df <- data.frame(x=datx,y=daty,sd=avec,se=bvec,col=factor(gvec,levels=labcol),feat=fvec,clust=cvec2)#
    (n <- nrow(dat.df))#
    dat.df$feat <- factor(dat.df$feat, levels = featname)#
    clustplot <- function(subclus,b1,b2) {#
        dat2 <- subset(dat.df, clust %in% subclus)#
        branch <- c(2,6,8,13,17,21,25,28)#
        (subc <- branch[subclus])#
        subcol2 <- subcol[subc]#
        x1 <- 30; x2 <- 60; x3 <- 70#
        rects <- data.frame(xstart = c(x1,x2), xend = c(x2,x3), col = letters[1:2])#
        p <- ggplot(data=dat2, aes(x=x, y=y)) +#
            geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
            facet_wrap(~feat, nrow=4, scales="free_y") +#
            geom_ribbon(aes(ymax=y+se,ymin=y-se,fill=factor(clust),alpha=0.2)) +#
            scale_fill_manual(values=subcol2) +#
            labs(x="time (sec)", y="response", shape="", colour="", linetype="") +#
            theme_bw() +#
            theme(legend.position="none") +#
            theme(axis.title.x=element_text(size=fsize)) +#
            theme(axis.title.y=element_text(size=fsize,angle=90)) +#
            theme(strip.text=element_text(size=rel(lsize-0.4)))#
        p#
    }#
    print(clustplot(1:2, 7, 8)); scan()#
    print(clustplot(3:4, 9, 10)); scan()#
    print(clustplot(5:6, 11, 12)); scan()#
    print(clustplot(7:8, 13, 14))#
}#
makeSuppS5A <- function()#
{#
    ctrlname <- c("38a","ppk","iav")#
    drawTrial <- function(cname) {#
        trial4 <- trial4list[[cname]]#
        trial4 <- cbind(1:nrow(trial4),trial4)#
        colnames(trial4) <- rep("",ncol(trial4))#
        ## shuffle rows#
        set.seed(12345)#
        ind <- sample(nrow(trial4))#
        trial4[,1] <- ind#
        idx <- running(2:ncol(trial4),by=4,width=4,fun=function(x) x, simplify=TRUE)#
        trial4.m <- trial4[,1:5]#
        for (i in 2:29) {#
            mat <- cbind(trial4[,1],trial4[,idx[,i]])#
            trial4.m <- rbind(trial4.m,mat)#
        }#
        colnames(trial4.m) <- c("id","T1","T2","T3","T4")#
        trial4.m <- as.data.frame(trial4.m)#
        trial4.m$cl <- rep(1:29,each=nrow(trial4))#
        trial4.m$T2[trial4.m$T2>0] <- 2#
        trial4.m$T3[trial4.m$T3>0] <- 3#
        trial4.m$T4[trial4.m$T4>0] <- 4#
        ## swap cl(6,7) -> cl(12,13)#
        trial4.m$cl[trial4.m$cl==6] <- 66#
        trial4.m$cl[trial4.m$cl==7] <- 77#
        trial4.m$cl[trial4.m$cl==12] <- 1212#
        trial4.m$cl[trial4.m$cl==13] <- 1313#
        trial4.m$cl[trial4.m$cl==66] <- 12#
        trial4.m$cl[trial4.m$cl==77] <- 13#
        trial4.m$cl[trial4.m$cl==1212] <- 6#
        trial4.m$cl[trial4.m$cl==1313] <- 7#
        trial4.m2 <- melt(trial4.m,id=c("id","cl"),value.name="trial")#
        trial4.m2$trial <- factor(trial4.m2$trial,labels=c("trial 0", "trial 1", "trial 2", "trial 3", "trial 4"))#
        greyv <- grey(0:10/10)[10]#
        p <- ggplot(trial4.m2, aes(variable,id,fill=trial)) +#
            geom_tile(data = subset(trial4.m2,trial!="trial 0"), aes(fill = trial),alpha=1) +#
            geom_tile(data = subset(trial4.m2,trial=="trial 0"), color=greyv,fill="white",alpha=1) +#
            facet_grid(. ~ cl) +#
            theme(axis.text.x=element_blank()) +#
            xlab("behaviotype") + ylab("animal")#
        p <- p + labs(fill="") + #theme_bw() +#
            theme(strip.text=element_text(size=rel(0.4)))#
        p#
    }#
    print(drawTrial(ctrlname[1])); scan()#
    print(drawTrial(ctrlname[2])); scan()#
    print(drawTrial(ctrlname[3]))#
}#
makeSuppS5B <- function()#
{#
    ctrl <- c("pBDPU","noci 2", "mechano", "proprio")#
    ctrl2 <- c("pbd1","38a1","iav1","11f0")#
    hits <- c("R46D01","R44H03")#
    hits2 <- c("46D01","44H03")#
    hitgr <- sapply(hits2, function(x) glob2rx(paste0("*",x,"*ppk*")))#
    subj <- c(ctrl2,hits)#
    subjname <- c(ctrl,hits)#
    subjctrl <- sapply(ctrl2, function(x) grep(x,labTall$ctrl))#
    subjhits <- lapply(hitgr, function(x) grep(x,as.character(labTall$line.eff)))#
    names(subjhits) <- hits#
    subjlines <- c(subjctrl,subjhits)#
    linetabC <- linetabT <- NULL#
    KhatC <- 29; KhatT <- 32#
    for (i in 1:length(subjctrl)) {#
        dat <- labTall[subjctrl[[i]],c("T1","T2","T3","T4")]#
        mat <- matrix(0,nrow(dat),KhatC)#
        for (j in 1:nrow(mat)) {#
            tmp <- as.numeric(dat[j,])#
            for (k in 1:4) {#
                mat[j,tmp[k]] <- mat[j,tmp[k]] + 1#
            }#
        }#
        linetabC[[i]] <- mat#
    }#
    for (i in 1:length(subjhits)) {#
        dat <- labTall[subjhits[[i]],c("T1","T2","T3","T4")]#
        mat <- matrix(0,nrow(dat),KhatT)#
        for (j in 1:nrow(mat)) {#
            tmp <- as.numeric(dat[j,])#
            for (k in 1:4) {#
                mat[j,tmp[k]] <- mat[j,tmp[k]] + 1#
            }#
        }#
        linetabT[[i]] <- mat#
    }#
    linetab <- c(linetabC,linetabT)#
    names(linetab) <- subj#
    (n <- length(outS5B))#
    (nv <- sapply(outS5B,function(x) x$n))#
    xmax <- 20#
    (pvec <- sapply(outS5B,function(x) x$n4)) #c(17,12,4)#
    df <- data.frame(line=paste0(subjname[1]," (N = ",nv[1],")"),probability=outS5B[[1]]$H0[1:xmax])#
    for (i in 2:n) {#
        df1 <- data.frame(line=paste0(subjname[i]," (N = ",nv[i],")"),probability=outS5B[[i]]$H0[1:xmax])#
        df <- rbind(df,df1)#
    }#
    dat2 <- df#
    dat2$x <- rep(seq(1,xmax),n)#
    dat2$max <- rep(pvec,each=xmax)#
    fsize <- 14; lsize <- 1#
    p <- ggplot(data=dat2, aes(x=x,y=probability))#
    p <- p + facet_wrap(~line, nrow=3, scales="free")#
    p <- p + geom_line(aes(color=line))#
    p <- p + geom_vline(aes(xintercept=max),linetype="dashed")#
    p <- p + theme_bw() + xlab("# animals expected to perform the same behaviotype on all 4 trials")#
    p <- p + theme(legend.position="none")#
    p <- p + theme(axis.title.x=element_text(size=fsize)) +#
             theme(axis.title.y=element_text(size=fsize,angle=90)) +#
             theme(strip.text=element_text(size=rel(lsize)))#
    print(p)#
}#
makeSuppS6AB <- function()#
{#
    animid <- c(140,12,148,147)#
    mydish <- c("20101123_124517","20110513_134910","20100826_100515","20100826_101729")#
    lname <- c("GMR_65B06_AE_01","GMR_38A10_AE_01","GMR_22D10_AE_01","GMR_68D02_AE_01")#
    ename <- c("UAS_ChRh2_23_0011","UAS_ppkGAL80_ChR2_23_0015","UAS_ChRh2_23_0011","UAS_ChRh2_23_0011")#
    linelab <- c(882,513,256,927)#
    ctrllab <- c("test","38a10","test","test")#
    anim4 <- data.frame(id=animid,dish=mydish,line=lname,eff=ename,linelab=linelab,ctrllab=ctrllab)#
    behav <- c(17,18)#
    fnum <- 2 # "forward/backward crawling bias"#
    df <- NULL#
    for (dnum in 1:length(animid)) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[fnum]+1#
        end <- begi[fnum+1]#
        sel1 <- which(laball2$animid==animid[dnum])#
        sel2 <- which(laball2$dish==mydish[dnum])#
        sel3 <- which(laball2$line==lname[dnum])#
        sel4 <- which(laball2$effector==ename[dnum])#
        sel <- Reduce(intersect, list(sel1,sel2,sel3,sel4))#
        dat <- matrix(Znorm[sel,beg:end],nrow=length(sel)) # behav#
#        dat <- Znorm[laball2$dish==mydish[dnum],beg:end]#
        meants <- apply(dat,2,mean)#
        sdts <- apply(dat,2,sd)#
        evec <- 1.96*sdts/sqrt(nrow(dat))#
        daty <- as.vector(t(dat))#
        datx <- seq(tbeg,tend,by=0.5)#
        avec <- rep(1:nrow(dat),each=ncol(dat))#
        fvec <- rep(featname[fnum],length(dat))#
        cvec <- rep("grey",length(dat))#
        datd <- animid[dnum]#
        dat.df <- data.frame(x=datx,y=daty,anim=factor(avec),feat=fvec,col=cvec,dish=datd)#
        df <- rbind(df,dat.df)#
    }#
    (n <- nrow(df))#
    df$feat <- factor(df$feat, levels = featname)#
    df$dish <- factor(df$dish, levels = animid) ## animid#
    p <- ggplot(data=df, aes(x=x, y=y)) +#
           geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
           facet_wrap(~dish, nrow=2) +#
           geom_line(aes(colour=col, group=anim, alpha=0.5)) +#
           labs(x="time (sec)", y="response", shape="", colour="", linetype="") +#
           theme_bw() +#
           theme(legend.position="none") +#
           theme(axis.title.x=element_text(size=fsize)) +#
           theme(axis.title.y=element_text(size=fsize,angle=90)) +#
           theme(strip.text=element_text(size=rel(lsize-0.4)))#
    p <- p + scale_color_manual(values=rep("grey",n))#
    print(p)#
    scan()#
    fnum <- 2 # "forward/backward crawling bias"#
    df <- NULL#
    for (dnum in 1:length(behav)) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[fnum]+1#
        end <- begi[fnum+1]#
        sel <- which(laball2$cluster.d5==behav[dnum])#
        dat <- matrix(Znorm[sel,beg:end],nrow=length(sel)) # behav#
        meants <- apply(dat,2,mean)#
        sdts <- apply(dat,2,sd)#
        evec <- 1.96*sdts/sqrt(nrow(dat))#
        daty <- as.vector(t(dat))#
        datx <- seq(tbeg,tend,by=0.5)#
        avec <- rep(1:nrow(dat),each=ncol(dat))#
        fvec <- rep(featname[fnum],length(dat))#
        cvec <- rep("grey",length(dat))#
        datd <- behav[dnum]#
        dat.df <- data.frame(x=datx,y=daty,y2=meants,se=evec,anim=factor(avec),feat=fvec,col=cvec,dish=datd)#
        df <- rbind(df,dat.df)#
    }#
    (n <- nrow(df))#
    df$feat <- factor(df$feat, levels = featname)#
    df$dish <- factor(df$dish, levels = behav) ## animid#
    lab1718 <- labcol[behav]#
    p2 <- ggplot(data=df, aes(x=x, y=y2)) +#
           geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
           facet_wrap(~dish, nrow=2) + #, scales="free_y") +#
           geom_ribbon(aes(ymax=y2+se,ymin=y2-se,fill=factor(dish),alpha=0.2)) +#
           scale_fill_manual(values=lab1718) +#
           labs(x="time (sec)", y="response", shape="", colour="", linetype="") +#
           theme_bw() +#
           theme(legend.position="none") +#
           theme(axis.title.x=element_text(size=fsize)) +#
           theme(axis.title.y=element_text(size=fsize,angle=90)) +#
           theme(strip.text=element_text(size=rel(lsize-0.4)))#
    print(p2)#
}#
plotcolordist <- function(mout,mdsz,mycol,na.col=mycol[1],mybrk=NULL,brklab=NULL,corder="cl",testcl=NULL,xlab="",ylab="",border=FALSE,legend.args=NULL,sortz=FALSE,tind=c(1,2),fake=FALSE,hits=NULL,nonhits=NULL,...)#
{#
    if (is.vector(mout)) cvec <- mout#
    else cvec <- mout$class#
    mclust.order <- NULL#
    for (i in 1:max(cvec)) {#
        ord <- which(cvec==i)#
        if (sortz) { ## sort 1st row/column#
            if (i %in% tind) { ## for hits and non-hits#
                tmp <- mdsz[1,ord]#
                ind <- order(tmp)#
                ord <- ord[ind]#
            }#
        }#
        mclust.order <- append(mclust.order,ord)#
    }#
    if (!is.null(testcl)) {#
        ## assume that the test is the last group#
        testgroup <- which(cvec==max(cvec))#
        test.order <- NULL#
        for (i in 1:max(testcl)) {#
            test.order <- append(test.order,(min(testgroup)-1)+which(testcl==i))#
        }#
        mclust.order[testgroup] <- test.order#
    }#
    if (ncol(mdsz)==nrow(mdsz)) {#
        zdist <- mdsz#
    } else {#
        zdist <- as.matrix(dist(mdsz))#
    }#
    if (is.null(mybrk)) {#
        mybrk <- seq(min(min(zdist),0),max(max(zdist),1),length.out=length(mycol)+1)#
        if (is.null(brklab)) {#
            brklab <- round(mybrk,1)#
        }#
    }#
    n <- nrow(zdist)#
    newzdist <- zdist[mclust.order,mclust.order]#
    if (fake) {#
        cat("faking...\n")#
        htab <- cumsum(table(cvec))#
        hind <- (htab[tind[1]-1]+1):htab[tind[1]]#
        nind <- (htab[tind[2]-1]+1):htab[tind[2]]#
        min1 <- min(newzdist[1,])#
        logrrr <- log10(hits);#
        logrrr[logrrr== -Inf] <- min1; logrrr[logrrr<min1] <- min1#
        logsss <- log10(nonhits);#
        logsss[logsss== -Inf] <- min1#
        logsss[logsss<min1] <- min1#
        newzdist[1,hind] <- sort(logrrr)#
        newzdist[1,nind] <- sort(logsss)#
        newzdist[,1] <- rev(newzdist[1,])#
    }#
    cmat <- dmat.color(newzdist,mycol) # was 5#
    newzdist <- newzdist[1:n,n:1]#
    image.plot(x=1:n,y=1:n,z=newzdist,col=mycol,xaxt="n",yaxt="n",xlab=xlab,ylab=ylab,breaks=mybrk,lab.breaks=brklab,cex.lab=csize,legend.args=legend.args)#
    plotcolors(cmat,na.color=na.col,add=T)#
    ## add boxes around clusters for d40#
    if (border) {#
        nc <- table(cvec)#
        nc.x <- c(1,cumsum(nc)+1)#
        nc.y <- c(nrow(mdsz),nrow(mdsz)-cumsum(nc)+1)#
        for (i in 1:max(cvec)) {#
            x1 <- nc.x[i]; x2 <- nc.x[i+1]#
            y1 <- nc.y[i]; y2 <- nc.y[i+1]#
            polygon(c(x1,x1,x2,x2), c(y1,y2,y2,y1),border=1,lwd=2)#
        }#
        if (!is.null(testcl)) {#
            nc2 <- table(testcl)#
            nc2.x <- min(testgroup)-1 + c(1,cumsum(nc2)+1)#
            nc2.y <- c(nrow(mdsz),nrow(mdsz)-cumsum(nc2)+1) - min(testgroup)#
            for (i in 1:max(testcl)) {#
                x1 <- nc2.x[i]; x2 <- nc2.x[i+1]#
                y1 <- nc2.y[i]; y2 <- nc2.y[i+1]#
                polygon(c(x1,x1,x2,x2), c(y1,y2,y2,y1),border=4,lwd=2)#
            }#
        }#
    }#
    box()#
}#
my.image2 <- function (x, col = c("white", rev(heat.colors(23))), breaks,#
                       log = TRUE, border = NA, box.offset = 0.1, round = 3, cex,#
                       text.cex = 1, text.col = "black", label.col = "black",#
                       mar = c(1, 3, 3, 1),#
                       labels = 2:3, upper.tri = FALSE, diag.lab = NULL,#
                       label.offset = 0.1, label.cex = 1, srt = 90)#
{#
    if (!is.matrix(x)) {#
        x <- t(as.matrix(x))#
    }#
    if (!missing(cex)) {#
#        text.cex = cex#
        label.cex = cex#
    }#
    op <- par(mar = mar, xpd = TRUE)#
    x <- x[nrow(x):1, , drop = FALSE]#
    x1 <- ncol(x)#
    y1 <- nrow(x)#
    if (length(col) == 1) {#
        col <- rep(col, 3)#
    }#
    if (length(col) == 2) {#
        col <- c(col, col[-1])#
    }#
    if (missing(breaks)) {#
        breaks <- length(col) - 1#
    }#
    else {#
        if (length(breaks) != length(col)) {#
            warning("Breaks is not the same length as colors.\nSome blocks may be unfilled or some colors may not be used")#
        }#
    }#
    checkmin <- min(x, na.rm = TRUE)#
    if (checkmin < 0) {#
        x <- x - checkmin#
    }#
    missingNA <- is.na(x)#
    x[x == 0] <- NA#
    if (log) {#
        z <- cut(log10(x), breaks)#
    }#
    else {#
        z <- cut(x, breaks)#
    }#
    z2 <- matrix(z, y1, x1)#
    x[is.na(x)] <- 0#
    x[missingNA] <- NA#
    if (checkmin < 0) {#
        x <- x + checkmin#
    }#
    x <- round(x, round)#
    offset <- box.offset/2#
    plot(seq(1, x1 + 1, len = 2), seq(1, y1 + 1, len = 2), type = "n",#
        axes = FALSE, ann = FALSE, xaxs = "i", yaxs = "i")#
    for (i in 1:x1) {#
        for (j in 1:y1) {#
            if (upper.tri & (i+j <= nrow(x))) next#
            if (!is.null(diag.lab) & (i+j-1==nrow(x))) next#
            if (is.na(z2[j, i])) {#
                n1 <- 1#
            }#
            else {#
                n1 <- match(z2[j, i], levels(z)) + 1#
            }#
            rect(i + offset, j + offset, i + 1 - offset, j +#
                1 - offset, border = border, col = col[n1])#
            if (!is.na(text.col)) {#
                if (text.cex!=0)#
                    text(i + 0.5, j + 0.5, x[j, i], cex = text.cex,#
                         col = text.col)#
            }#
        }#
    }#
    if (2 %in% labels) {#
        if (is.null(diag.lab))#
            text(1 - label.offset, 1:y1 + 0.5, rownames(x), pos = 2,#
                 offset = 0, cex = label.cex, col=label.col)#
        else#
            text(x1:1 + 1 - label.offset, 1:y1 + 0.5, rownames(x), pos = 2,#
                 offset = 0, cex = label.cex, col=label.col)#
    }#
    if (4 %in% labels)#
        text(x1 + 1 + label.offset, 1:y1 + 0.5, rownames(x),#
            pos = 4, offset = 0, cex = label.cex, col=label.col)#
    if (1 %in% labels)#
        text(1:x1 + 0.5, 0.9 - label.offset, colnames(x), pos = 2,#
            offset = 0, srt = (0 + srt), cex = label.cex, col=label.col)#
    if (3 %in% labels)#
        text(1:x1 + 0.8, y1 + 1.1 + label.offset, colnames(x), , col=label.col,#
            pos = 2, offset = 0, srt = (360 - srt), cex = label.cex)#
    par(op)#
}
makeFigure1(); scan()
makeFigure2A(); scan()
png()
makeFigure1(); dev.off();png()
ls()
dir()
dev.off()
png()
makeFigure1(); dev.off();png()
makeFigure2A(); dev.off();png()#
    makeFigure2B(); dev.off();png()#
    makeFigure2CF(); dev.off();png()#
    makeFigure2DE(); dev.off();png()#
    makeFigure3A(); dev.off();png()#
    makeFigure3B(); dev.off();png()#
    makeFigure3C(); dev.off();png()#
    makeFigure3DE(); dev.off();png()#
    makeFigure4A(); dev.off();png()#
    makeSuppS1toS4(); dev.off();png()#
    makeSuppS5A(); dev.off();png()#
    makeSuppS5B(); dev.off();png()#
    makeSuppS6AB(); dev.off()
usePackage <- function(p) {#
    if (!is.element(p, installed.packages()[,1]))#
        install.packages(p, dep = TRUE)#
    require(p, character.only = TRUE)#
}#
pckg = c("devtools","ggplot2","RColorBrewer","flexclust","plyr","fields","gtools","gclus","popbio","reshape2") #
tmp <- sapply(pckg,usePackage)#
(require(ggphylo) || install_github("gjuggler/ggphylo",quick=TRUE)); require(ggphylo)#
fsize <- 21#
lsize <- 1.4#
csize <- 1.7#
shadecol <- "#DEEBF7" ## light blue#
tbeg <- 0#
tend <- 39#
stend <- 30#
theme_set(theme_bw(base_size = fsize))#
theme_set(theme_grey(base_size = fsize))#
mycol <- colorRampPalette(c("white","lightblue","darkblue","black"))(100)#
## other variables#
clab <- c("pbd1","pbd2","pbd3","ppk1","ppk2","iav1","61d0","38a1","38a2","20c0","11f0")#
featname <- c("area (a.u.)",#
              "forward/backward crawling bias",#
              "head turn (deg)",#
              "sideways movement speed (mm/sec)",#
              "direction of motion",#
              "length (a.u.)",#
              "width (a.u.)",#
              "speed (mm/sec)")#
nfeat <- length(featname)#
makeFigure1 <- function()#
{#
    ## (b)#
    mydish <- "20101217_131413"#
    datx <- daty <- avec <- fvec <- cvec <- NULL#
    for (featnum in 1:nfeat) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[featnum]+1#
        end <- begi[featnum+1]#
        dat <- Znorm[laball2$dish==mydish,beg:end]#
        daty <- c(daty,as.vector(t(dat)))#
        datx <- c(datx,seq(tbeg,tend,by=0.5))#
        avec <- c(avec,rep(1:nrow(dat),each=ncol(dat)))#
        fvec <- c(fvec,rep(featname[featnum],length(dat)))#
        cvec <- c(cvec,rep("grey",length(dat)))#
    }#
    dat.df <- data.frame(x=datx,y=daty,anim=factor(avec),feat=fvec,col=cvec)#
    n <- nrow(dat.df)#
    dat.df$feat <- factor(dat.df$feat, levels = featname)#
    p <- ggplot(data=dat.df, aes(x=x, y=y)) +#
           geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
           facet_wrap(~feat, nrow=4, scales="free_y") +#
           geom_line(aes(colour=col, group=anim, alpha=0.5)) +#
           labs(x="time (sec)", y="response", shape="", colour="", linetype="") +#
           theme_bw() +#
           theme(legend.position="none") +#
           theme(axis.title.x=element_text(size=fsize)) +#
           theme(axis.title.y=element_text(size=fsize,angle=90)) +#
           theme(strip.text=element_text(size=rel(lsize-0.4)))#
    p <- p + scale_color_manual(values=rep("grey",n))#
    ggsave(plot=p,"Figure1B.pdf")#
#    print(p)#
}#
makeFigure2A <- function()#
{#
    #################
    ## (a)#
    #################
    mydish <- "20101217_131413"#
    datx <- daty <- avec <- fvec <- cvec <- NULL#
    set.seed(12345)#
    samp <- sample(nrow(Znorm),1000,rep=FALSE)#
    for (featnum in 1:nfeat) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[featnum]+1#
        end <- begi[featnum+1]#
        dat <- Znorm[samp,beg:end]#
        daty <- c(daty,as.vector(t(dat)))#
        datx <- c(datx,seq(tbeg,tend,by=0.5))#
        avec <- c(avec,rep(1:nrow(dat),each=ncol(dat)))#
        fvec <- c(fvec,rep(featname[featnum],length(dat)))#
        cvec <- c(cvec,rep("grey",length(dat)))#
    }#
    dat.df <- data.frame(x=datx,y=daty,anim=factor(avec),feat=fvec,col=cvec)#
    (n <- nrow(dat.df))#
    dat.df$feat <- factor(dat.df$feat, levels = featname)#
    p <- ggplot(data=dat.df, aes(x=x, y=y)) +#
           geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
           facet_wrap(~feat, nrow=4, scales="free_y") +#
           geom_line(aes(colour=col, group=anim, alpha=0.5)) +#
           labs(x="time (sec)", y="", shape="", colour="", linetype="") +#
           theme_bw() +#
           theme(legend.position="none") +#
           theme(axis.title.x=element_text(size=fsize)) +#
           theme(axis.title.y=element_text(size=fsize,angle=90)) +#
           theme(strip.text=element_text(size=rel(lsize-0.4)))#
    p <- p + scale_color_manual(values=rep("grey",n))#
    ggsave(plot=p,"Figure2A.pdf")#
#    print(p)#
}#
makeFigure2B <- function()#
{#
    #################
    ## (b)#
    #################
    cl <- laball2$cluster.d5#
    (khat <- max(cl))#
    (tt <- table(cl))#
    (samp <- as.integer(tt/min(tt)))#
    meanZ <- t(sapply(1:khat, function(x) colMeans(mdsz[cl==x,])))#
    min2 <- lapply(1:khat, function(x) {#
        sel3 <- which(cl==x);#
        delta <- dist2(mdsz[sel3,], meanZ[x,])#
        sel3[order(delta)[1:samp[x]]]#
    })#
    sel2 <- unlist(min2)#
    mdsz2 <- mdsz[sel2,]#
    dmat <- as.matrix(dist(mdsz2))#
    dmat[dmat>1] <- 1#
    dmat[dmat==max(dmat)] <- 1#
    newcl <- rep(1:khat,times=samp)#
    col5 <- rev(cm.colors(5))#
    set.seed(12345)#
    ord <- sample(1:nrow(dmat),rep=FALSE)#
    png("Figure2B.png",width=5.5,height=5.5,units="in",res=300)#
    par(mar=c(4,2,3,2)+0.1) ## Reduced margins at top and left#
    plotcolordist(newcl,dmat[ord,ord],col5,border=FALSE,#
                  legend.args=list(text="interpoint dissimilarity",#
                  col="black", cex=1.3, side=4, line=2.5))#
    mtext("animal responses", side=3, line=0.5,cex=1.5)#
    mtext("animal responses", side=2, line=0.5, cex=1.5)#
    dev.off()#
}#
makeFigure2CF <- function()#
{#
    #################
    ## (c)#
    #################
    z31<-"(692,(1995,2763) 4758) 5450"#
    z32<-"((2515,1190) 3705,(3487,1603) 5090) 8795"#
    z33<-"((398,1157) 1555, 113) 1668"#
    z34<-"((1210,2225) 3435,(1037,244) 1281) 4716"#
    z35<-"((895,295) 1190,(661,441) 1102) 2292"#
    z36<-"((266,34) 300,(63,31) 94) 394"#
    z37<-"((1995,1371) 3366,(2748,3783) 6531) 9897"#
    z38<-"(425,(2305,1838) 4143) 4568"#
    z21 <- paste("(",z31,",",z32,")","14245")#
    z22 <- paste("(",z33,",",z34,")","6384")#
    z23 <- paste("(",z35,",",z36,")","2686")#
    z24 <- paste("(",z37,",",z38,")","14465")#
    z1 <- paste("(",z21,",",z22,")","20629")#
    z2 <- paste("(",z23,",",z24,")","17151")#
    z <- paste("(",z1,",",z2,")","37780",";")#
    mytree <- read.tree(text=z)#
    G <- length(mytree$tip.label)#
    sizes <- c(as.numeric(mytree$tip.label),as.numeric(mytree$node.label))#
    for (i in nodes(mytree)) {#
        mytree <- tree.set.tag(mytree, i, 'sizes', sizes[i])#
        mytree <- tree.set.tag(mytree, i, 'sizes', sizes[i])#
    }#
    plot.args <- list(#
                  mytree,#
                  node.size.by='sizes',#
                  node.size.scale = scale_size_continuous(limits=c(0, 40000), range=c(1, 5)),#
                  line.size.by='sizes',#
                  legend.position=c(6,15), # no effect!#
                  label.size=5,#
                  label.color=labcol#
                  )#
    p <- do.call(ggphylo, plot.args) + theme(legend.position="none")#
    p <- p + xlim(-0.2,6.5) + ylim(0,31) + xlab("tree depth level")#
    p <- p + theme(axis.title.x=element_text(size=fsize))#
    pp <- p + theme(axis.title.x=element_text(size=fsize))#
    xmin <- 5.7; xmax <- 6.1#
    for (i in 1:29) {#
        pp <- pp +#
        geom_rect(data=NULL, xmin=xmin, xmax=xmax, ymin=i-0.5, ymax=i+0.5, fill=labcol[i], color="black", alpha=0.5)#
        pp <- pp +#
        geom_text(data=NULL,x=5.9,y=i,label=i,color="white",size=4)#
    }#
    pp <- pp + theme(axis.ticks = element_blank(), axis.text.y = element_blank(), axis.title.y=element_blank())#
    pp <- pp + annotate("text",x=6.4,y=15.0,label="statistically distinguishable behaviotypes",angle=90,size=6)#
    pp <- pp + annotate("text",x=5.3,y=30.5,label="# animals",angle=0,size=4)#
#    print(pp)#
    ggsave(plot=pp,"Figure2C.pdf")#
#    scan()#
    #################
    ## (f)#
    #################
    labs1 <- c("slow", "fast")#
    labs2 <- c("turners", "still or back-up",#
               "escape", "turn-avoid")#
    labs3 <- c("turn-turn-turn", "turn-slow-crawl",#
               "still", "back-up",#
               "wiggle-escape", "straight-escape",#
               "right-left-avoid", "left-right-avoid")#
    labs <- c(labs1,labs2,labs3)#
    labpos <- matrix(c(0.5,23.3, 0.5,8.3,#
                       1.5,27, 1.5,19.3, 1.5,11.75, 1.5,4.45,#
                       2.5,28.45, 2.5,25.22, 2.5,21.15, 2.5,17.2,#
                       2.5,13.2, 2.5,9.95, 2.5,6.2, 2.5,2.5),#
                     ncol=2, byrow=T)#
    labsize <- c(rep(3,length(labs1)),#
                 rep(2.5,length(labs2)),#
                 rep(2,length(labs3))) * 2.5#
    labcol1 <- rev(colorRampPalette(brewer.pal(11,"Reds"))(20))[1:7]#
    labcol2 <- rev(colorRampPalette(brewer.pal(11,"Oranges"))(20))[1:7]#
    labcol3 <- rev(colorRampPalette(brewer.pal(11,"PuBu"))(20))[1:8]#
    labcol4 <- rev(colorRampPalette(brewer.pal(11,"Greens"))(20))[1:7]#
    labcol11 <- labcol1[1:3]; labcol12 <- labcol1[4:7]#
    labcol21 <- labcol2[1:4]; labcol22 <- labcol2[5:7]#
    labcol1 <- c(labcol11,labcol21)#
    labcol2 <- c(labcol12,labcol22)#
    labcol <- c(labcol1,rev(labcol2),labcol3,rev(labcol4))#
    bcol <- c(labcol3[8], labcol1[7],#
              labcol4[3], labcol3[4], labcol2[3], labcol1[3],#
              labcol4[2], labcol4[5], labcol3[6], labcol3[3],#
              labcol2[2], labcol2[6], labcol1[6], labcol1[2])#
    p2 <- p + geom_text(data=NULL,x=labpos[1,1],y=labpos[1,2],label=labs[1],color=labcol3[8],size=labsize[1]) +#
      geom_text(data=NULL,x=labpos[2,1],y=labpos[2,2],label=labs[2],color=labcol1[7],size=labsize[2]) +#
      geom_text(data=NULL,x=labpos[3,1],y=labpos[3,2],label=labs[3],color=labcol4[3],size=labsize[3]) +#
      geom_text(data=NULL,x=labpos[4,1],y=labpos[4,2],label=labs[4],color=labcol3[4],size=labsize[4]) +#
      geom_text(data=NULL,x=labpos[5,1],y=labpos[5,2],label=labs[5],color=labcol2[3],size=labsize[5]) +#
      geom_text(data=NULL,x=labpos[6,1],y=labpos[6,2],label=labs[6],color=labcol1[3],size=labsize[6]) +#
      geom_text(data=NULL,x=labpos[7,1],y=labpos[7,2],label=labs[7],color=labcol4[2],size=labsize[7]) +#
      geom_text(data=NULL,x=labpos[8,1],y=labpos[8,2],label=labs[8],color=labcol4[5],size=labsize[8]) +#
      geom_text(data=NULL,x=labpos[9,1],y=labpos[9,2],label=labs[9],color=labcol3[6],size=labsize[9]) +#
      geom_text(data=NULL,x=labpos[10,1],y=labpos[10,2],label=labs[10],color=labcol3[3],size=labsize[10]) +#
      geom_text(data=NULL,x=labpos[11,1],y=labpos[11,2],label=labs[11],color=labcol2[2],size=labsize[11]) +#
      geom_text(data=NULL,x=labpos[12,1],y=labpos[12,2],label=labs[12],color=labcol2[6],size=labsize[12]) +#
      geom_text(data=NULL,x=labpos[13,1],y=labpos[13,2],label=labs[13],color=labcol1[6],size=labsize[13]) +#
      geom_text(data=NULL,x=labpos[14,1],y=labpos[14,2],label=labs[14],color=labcol1[2],size=labsize[14])#
    p2 <- p2 + theme(axis.title.x=element_text(size=fsize))#
    p3 <- p2#
    xmin <- 5.7; xmax <- 6.1#
    for (i in 1:29) {#
        p3 <- p3 +#
        geom_rect(data=NULL, xmin=xmin, xmax=xmax, ymin=i-0.5, ymax=i+0.5, fill=labcol[i], color="black", alpha=0.5)#
    }#
    p4 <- p3#
    for (i in 1:29) {#
        p4 <- p4 +#
        geom_text(data=NULL,x=5.9,y=i,label=i,color="white",size=4)#
    }#
    p4 <- p4 + theme(axis.ticks = element_blank(), axis.text.y = element_blank(), axis.title.y=element_blank())#
    p4 <- p4 + annotate("text",x=1.5,y=31.0,label="'post-hoc' human labels",angle=0,size=6)#
    p4 <- p4 + annotate("text",x=5.3,y=30.5,label="# animals",angle=0,size=4)#
    p5 <- p4 + annotate("text",x=6.4,y=15.0,label="statistically distinguishable behaviotypes",angle=90,size=6)#
#    print(p5)#
    ggsave(plot=p5,"Figure2F.pdf")#
}#
makeFigure2DE <- function()#
{#
    #################
    ## (d)#
    #################
    dat <- laball2$cluster.d5#
    subc <- 1:max(dat)#
    subcol2 <- labcol[subc]#
    numG <- 1:max(dat)#
    datx <- daty <- avec <- bvec <- fvec <- gvec <- cvec2 <- NULL#
    for (featnum in 1:nfeat) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[featnum]+1#
        end <- begi[featnum+1]#
        mvec <- svec <- evec <- kvec <- lvec <- cvec <- NULL#
        for (clusnum in numG) {#
            sel <- which(dat==clusnum)#
            meants <- apply(Znorm[sel,beg:end],2,mean)#
            sdts <- apply(Znorm[sel,beg:end],2,sd)#
            mvec <- c(mvec,meants)#
            svec <- c(svec,sdts)#
            evec <- c(evec,1.96*sdts/sqrt(length(sel)))#
            kvec <- c(kvec,rep(paste("C",sprintf("%02d",clusnum),sep=""),length(meants)))#
            cvec <- c(cvec,rep(labcol[clusnum],length(meants)))#
            lvec <- c(lvec,rep(clusnum,length(meants))) # 50#
        }#
        datx <- c(datx,seq(tbeg,tend,by=0.5))#
        daty <- c(daty,mvec)#
        avec <- c(avec,svec)#
        bvec <- c(bvec,evec)#
        gvec <- c(gvec,cvec)#
        fvec <- c(fvec,rep(featname[featnum],length(mvec)))#
        cvec2 <- c(cvec2,lvec)#
    }#
    dat.df <- data.frame(x=datx,y=daty,sd=avec,se=bvec,col=factor(gvec,levels=labcol),feat=fvec,clust=cvec2)#
    (n <- nrow(dat.df))#
    dat.df$feat <- factor(dat.df$feat, levels = featname)#
    subclus <- 1:max(dat)#
    dat2 <- subset(dat.df, clust %in% subclus)#
    p <- ggplot(data=dat2, aes(x=x, y=y)) +#
           geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
           facet_wrap(~feat, nrow=4, scales="free_y") +#
           geom_ribbon(aes(ymax=y+se,ymin=y-se,fill=factor(clust),alpha=0.2)) +#
           scale_fill_manual(values=subcol2) +#
           labs(x="time (sec)", y="", shape="", colour="", linetype="") +#
           theme_bw() +#
           theme(legend.position="none") +#
           theme(axis.title.x=element_text(size=fsize)) +#
           theme(axis.title.y=element_text(size=fsize,angle=90)) +#
           theme(strip.text=element_text(size=rel(lsize-0.4)))#
#    print(p)#
    ggsave(plot=p,"Figure2D.pdf")#
#    scan()#
    #################
    ## (e)#
    #################
    dat <- laball2$cluster.d3#
    subc <- c(2,6,8,13,17,21,25,28)#
    subcol2 <- labcol[subc]#
    numG <- 1:max(dat)#
    datx <- daty <- avec <- bvec <- fvec <- gvec <- cvec2 <- NULL#
    for (featnum in 1:nfeat) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[featnum]+1#
        end <- begi[featnum+1]#
        mvec <- svec <- evec <- kvec <- lvec <- cvec <- NULL#
        for (clusnum in numG) {#
            sel <- which(dat==clusnum)#
            meants <- apply(Znorm[sel,beg:end],2,mean)#
            sdts <- apply(Znorm[sel,beg:end],2,sd)#
            mvec <- c(mvec,meants)#
            svec <- c(svec,sdts)#
            evec <- c(evec,1.96*sdts/sqrt(length(sel)))#
            kvec <- c(kvec,rep(paste("C",sprintf("%02d",clusnum),sep=""),length(meants)))#
            cvec <- c(cvec,rep(labcol[clusnum],length(meants)))#
            lvec <- c(lvec,rep(clusnum,length(meants))) # 50#
        }#
        datx <- c(datx,seq(tbeg,tend,by=0.5))#
        daty <- c(daty,mvec)#
        avec <- c(avec,svec)#
        bvec <- c(bvec,evec)#
        gvec <- c(gvec,cvec)#
        fvec <- c(fvec,rep(featname[featnum],length(mvec)))#
        cvec2 <- c(cvec2,lvec)#
    }#
    dat.df <- data.frame(x=datx,y=daty,sd=avec,se=bvec,col=factor(gvec,levels=labcol),feat=fvec,clust=cvec2)#
    (n <- nrow(dat.df))#
    dat.df$feat <- factor(dat.df$feat, levels = featname)#
    subclus <- 1:max(dat)#
    dat2 <- subset(dat.df, clust %in% subclus)#
    p <- ggplot(data=dat2, aes(x=x, y=y)) +#
           geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
           facet_wrap(~feat, nrow=4, scales="free_y") +#
           geom_ribbon(aes(ymax=y+se,ymin=y-se,fill=factor(clust),alpha=0.2)) +#
           scale_fill_manual(values=subcol2) +#
           labs(x="time (sec)", y="", shape="", colour="", linetype="") +#
           theme_bw() +#
           theme(legend.position="none") +#
           theme(axis.title.x=element_text(size=fsize)) +#
           theme(axis.title.y=element_text(size=fsize,angle=90)) +#
           theme(strip.text=element_text(size=rel(lsize-0.4)))#
    ggsave(plot=p,"Figure2E.pdf")#
#    print(p)#
}#
makeFigure3A <- function()#
{#
    n <- nrow(dat3A)#
    ctrl3A <- dat3A[48:57,3]#
    outc <- sapply(1:length(ctrl3A), function(x) which(ctrl3A[x]==laball2$linelab))#
    linename <- c(paste(dat3A[1:47,2],dat3A[1:47,3],sep="@"),as.character(dat3A[48:57,2]))#
    outline <- sapply(1:n,function(x)  which(paste(dat3A[x,2],dat3A[x,3],sep="@") == laball2$line.eff))#
    outline[48:n] <- outc#
    tabline <- ldply(outline, function(x) tabulate(laball2[x,"cluster.d5"],nbins=29))#
    outdish <- sapply(outline,function(x)  unique(laball2[x,"dish"]))#
    dishanim <- lapply(outdish, function(x) lapply(x, function(y) which(laball2$dish %in% y)))#
    tabdish <- llply(dishanim, function(x) ldply(x, function(y) tabulate(laball2[y,"cluster.d5"],nbins=29)))#
    names(tabdish) <- c(paste(dat3A[1:47,2],dat3A[1:47,3],sep="@"),as.character(dat3A[48:57,2]))#
    for (i in 1:length(tabdish)) {#
        rownames(tabdish[[i]]) <- as.character(outdish[[i]])#
    }#
    tabdish2 <- ldply(tabdish)#
    tmp <- tabdish2[,1]#
    tabdish2 <- tabdish2[,-1]#
    myorder <- sapply(1:length(linename), function(x) which(tmp %in% linename[x]))#
    labord <- c(rep(14,3), rep(13,4), rep(12,3), rep(11,4),rep(10,4),rep(9,4), rep(8,4), rep(7,3))#
    (behav <- behavname[labord])#
    ## mean for positive controls#
    sel <- c("R11F05","iav","R38A10","ppk")#
    sel3 <- c("11f05", "iav", "38a1", "ppk") # ppk1=101#
    sel2 <- c("proprioceptive\n (R11F05)",#
             "mechanosensory\n (iav)",#
             "nocicpetive\n (R38A10)",#
             "nocicpetive\n (ppk)")#
    numselP <- length(sel)#
    (selind <- match(sel,linename))#
    (nc3 <- sapply(myorder[selind],length))#
    numP <- nc3#
    (numP <- sapply(sel3,function(x) sum(laball2$ctrllab==x)))#
    numP[3] <- 205#
    numP[4] <- 101#
    (nc.y3 <- c(1,cumsum(nc3)+1))#
    y21 <- nc.y3[1]; y22 <- nc.y3[length(sel)+1]; (ny3 <- y22-y21+1)#
    dat <- tabdish2[unlist(myorder[selind])-1,]#
    dat <- t(apply(dat,1,function(x) x/sum(x)*100))#
    ndat <- nrow(dat)#
    ctype <- rep(linename[selind],sapply(myorder[selind],length))#
    meandatP <- matrix(sapply(linename[selind],function(x) colMeans(dat[ctype==x,])),nrow=length(selind),byrow=T)#
    linenameP <- sel2#
    rownames(meandatP) <- sel2#
    ## mean for positive controls#
    set.seed(12)#
    nlab <- "sample\n negative\n controls\n (pBDPU)"#
    nlab2 <- "negative\n controls\n (pBDPU)"#
    (selind <- grep("pBDPU",linename))#
    selN <- unlist(myorder[selind])#
    (nc3 <- length(selN))#
    (numN <- sum(laball2$linelab==1217)) # pbd1#
    smallerN <- sample(selN,ndat,rep=FALSE)#
    (nc3 <- length(smallerN))#
    numselN <- 1#
    (nc.y3 <- c(1,cumsum(nc3)+1))#
    y21 <- nc.y3[1]; y22 <- nc.y3[length(selind)+1]; (ny3 <- y22-y21+1)#
    dat <- tabdish2[smallerN-1,]#
    dat <- t(apply(dat,1,function(x) x/sum(x)*100))#
    range(dat[,8:14])#
    datN <- tabdish2[selN,]#
    datN <- t(apply(datN,1,function(x) x/sum(x)*100))#
    meandatN <- matrix(colMeans(datN),nrow=1)#
    linenameN <- nlab2#
    rownames(meandatN) <- nlab2#
    meandat <- rbind(meandatP,meandatN)#
    require(plyr)#
    dat3A2 <- dat3A2[c(1,6,5,7,3,4,2,12,11,9,10,8),]#
    selline <- sapply(1:nrow(dat3A2),function(x) which(paste(dat3A2[x,2],dat3A2[x,3],sep="@") == laball2$line.eff))#
    (n <- length(selline))#
    mctrl <- dat3A[48:57,2]#
    (mctrlind <- match(c("ppk","R38A10"), mctrl))#
    selline[n+(1:2)] <- outc[mctrlind]#
    (n <- length(selline))#
    sellinename <- sapply(selline,function(x) unique(laball2[x,"line.eff"]))#
    tabline <- ldply(selline, function(x) tabulate(laball2[x,"cluster.d5"],nbins=29))#
    outdish <- sapply(selline,function(x)  unique(laball2[x,"dish"]))#
    dishanim <- lapply(outdish, function(x) lapply(x, function(y) which(laball2$dish %in% y)))#
    tabdish <- llply(dishanim, function(x) ldply(x, function(y) tabulate(laball2[y,"cluster.d5"],nbins=29)))#
    names(tabdish) <- sellinename#
    for (i in 1:length(tabdish)) {#
        rownames(tabdish[[i]]) <- as.character(outdish[[i]])#
    }#
    tabdish[[n-1]] <- as.data.frame(matrix(colMeans(tabdish[[n-1]]),nrow=1))#
    tabdish[[n]] <- as.data.frame(matrix(colMeans(tabdish[[n]]),nrow=1))#
    tabdish2 <- ldply(tabdish)#
    tmp <- tabdish2[,1]#
    tabdish2 <- tabdish2[,-1]#
    myorder <- sapply(1:length(sellinename), function(x) which(tmp %in% sellinename[x]))#
    (selind <- 1:n)#
    nc3 <- sapply(myorder[selind],length)#
    (nc.y3 <- c(1,cumsum(nc3)+1))#
    y21 <- nc.y3[1]; y22 <- nc.y3[length(selind)+1]; (ny3 <- y22-y21+1)#
    dat <- tabdish2[unlist(myorder[selind]),]#
    dat <- t(apply(dat,1,function(x) x/sum(x)*100))#
    dishes <- c(clab,"none")#
    (nums <- sapply(1:length(dishes),function(x) sum(dishes[x]==dishinfo$ctrl)))#
    cl <- rep.int(1:length(dishes),nums)#
    cmat <- t(apply(cmat3A,1,function(x) x/sum(x)*100))#
    cmat <- cmat[dishid,]#
    (n <- nrow(cmat))#
    (d <- ncol(cmat))#
    dishes <- c(clab,"none")#
    (nums <- sapply(1:length(dishes),function(x) sum(dishes[x]==dishinfo$ctrl)))#
    cl <- rep.int(1:length(dishes),nums)#
    nsamp <- 30#
    set.seed(12345)#
    sub <- sample(which(dishinfo$ctrl=="none"),nsamp,replace=FALSE)#
    dishid <- sub#
    cmat <- t(apply(cmat,1,function(x) x/sum(x)*100))#
    d <- ncol(cmat)#
    newdat <- cmat[dishid,]#
    numT <- sapply(dishinfo[dishid,"line"],function(x) sum(laball2$linelab==x))#
    selT <- "sample novel\n test lines"#
    sel <- selT#
    ## combine mean of positive, negative, and 50 sampled test#
    meandat <- rbind(meandatP, meandatN, newdat)#
    (newn <- nrow(meandat))#
    sel3 <- c("meanP","meanN",sel)#
    numAll <- c(numP,numN,numT)#
    (nc3 <- c(nrow(meandatP),nrow(meandatN),nsamp))#
    (nc.y3 <- c(0,cumsum(nc3)+0.5))#
    y21 <- nc.y3[1]; y22 <- nc.y3[length(sel)+1]; (ny3 <- y22-y21+1)#
    pdf("Figure3A.pdf")#
    op <- par(mar=c(3,7,1,1)+0.2,mgp=c(4,1,0))#
    image.plot(x=1:d,y=1:newn,z=t(meandat),col=mycol,#
               xlab="",ylab="",xaxt="n",yaxt="n",cex.lab=csize,zlim=c(0,40),#
               legend.args=list(text="probability of performing a behaviotype (%)",#
               col="black", cex=1.2, side=4, line=2))#
    for (i in y21:y22) {#
        abline(h=nc.y3[i],lwd=0.5,col="black")#
    }#
    box()#
    ticks <- 1:d#
    xname <- paste(ticks,behav,sep=": ")#
    ticks <- 1:d#
    ticks2 <- cumsum(c(7,7,8,7))+0.5#
    ticksm <- running(cumsum(c(1,c(7,7,8,7))),width=2,fun=mean)#
    par(xpd=TRUE)#
    for (x in ticks) rect(x-0.5,-1,x+0.5,0.5,col=labcol[x], border=NA)#
    box()#
    text(ticks,par("usr")[3]-0.7,labels=1:29,col="white", xpd=TRUE,cex=0.8,font=2)#
    text(ticksm,par("usr")[3]-2.2,labels=c("avoid","escape","backup","turn"),col=labcol[c(3,10,17,25)], xpd=TRUE,cex=1.5,font=2)#
    mtext("behaviotype",side=1,line=0,adj=0,at=30)#
    ticks <- running(nc.y3,width=2,fun=mean)#
    axis(side=2, at=ticks, labels=sel3,las=1,cex.axis=1);#
    dev.off()#
}#
makeFigure3B <- function()#
{#
    useNctrl <- c("pbd1")#
    usePctrl <- c("ppk1","38a1","11f0","iav1")#
    usectrl <- c(useNctrl,usePctrl)#
    (ctrlind <- match(usectrl,clab))#
    (ctrlcl <- 1:length(ctrlind))#
    (unused <- (1:length(clab))[-ctrlind])#
    ## ctrl ind#
    (cind <- sapply(usectrl,function(x) which(x==lineinfo$ctrl)))#
    ## test ind#
    tind0 <- testinfo$linelab#
    testcl <- testinfo$testcl#
    tind1 <- which(testcl<36) ## hits#
    tind2 <- which(testcl==36) ## non-hits#
    tind <- c(tind0[tind1],tind0[tind2])#
    testcl[tind1] <- length(cind)+1#
    testcl[tind2] <- length(cind)+2#
    mycol5 <- heat.colors(5)#
    cpall <- pall[1:11,1:11]#
    tmp <- matrix(0,11,1218)#
    tmp[1:11,1:11] <- cpall#
    tmp[1:11,12:1218] <- t(testPmeta[,1:11])#
    pall2 <- rbind(tmp,testPmeta)#
    tind0 <- (length(clab)+1):nrow(pall2)#
    tind1 <- which(pall2[1,]<=0.05)#
    tind <- setdiff(tind1,1:11)#
    testcl <- rep(length(cind)+2,length(tind0))#
    testcl[tind-length(clab)] <-length(cind)+1#
    cl <- c(ctrlcl, testcl)#
    pall2 <- pall2[-unused,-unused]#
    pall2[pall2==0] <- min(pall2[pall2!=0])#
    mybrks <- unique(round(sort(c(log10(0.05),seq(min(log10(pall2)),max(log10(pall2)),length.out=length(mycol5)))),1))#
    brklabs <- c(expression(10^-5),expression(10^-4),expression(10^-3),0.05,0.2,1)#
    pall3 <- log10(pall2)#
    nc <- 1 # length(usectrl)#
    xxx <- 10#
    cl2 <- c(rep(cl[1:nc],each=xxx),cl[-c(1:nc)])#
    idx <- c(rep(cl[1:nc],each=xxx),(nc+1):nrow(pall3))#
    pall4 <- pall3[idx,idx]#
    png("Figure3B.png",width=5.5,height=5.5,units="in",res=300)#
    plotcolordist(cl2,pall4,mycol5,mybrk=mybrks,#
                  brklab=brklabs,na.col=mycol5[length(mycol5)],#
                  sortz=TRUE, tind=c(6,7),#
                  legend.args=list(text="p-value",#
                  col="black", cex=1.5, side=4, line=2.7))#
    mtext("hit lines", side=3, line=0.5, cex=1.5, at=492/2)#
    mtext("non-hit lines", side=3, line=0.5, cex=1.5, at=492+(1207-492)/2) # 0.3#
    mtext("non-hit lines", side=2, line=0.5, cex=1.5, at=(1207-492)/2)#
    mtext("hit lines", side=2, line=0.5, cex=1.5, at=(1207-492) + 492/2)#
    box(lwd=2)#
    dev.off()#
}#
makeFigure3C <- function()#
{#
    ##################
    ## Fig 3c#
    ##################
    pall[pall==0] <- min(pall[pall!=0])#
    nline <- nrow(pall)#
    mycol <- rev(cm.colors(5))#
    dishes <- c(clab,"none")#
    (nums <- sapply(1:length(dishes),function(x) sum(dishes[x]==lineinfo$ctrl)))#
    cl <- rep.int(1:length(dishes),nums)#
    dishpmat2[dishpmat2==0] <- min(dishpmat2[dishpmat2!=0])#
    usec <- c("pbd1","ppk1","38a1","iav1","11f0")#
    (useind <- sapply(usec, function(x) which(rownames(dishPmeta) == x)))#
    rownames(dishPmeta)[useind]#
    logp <- dishPmeta[useind,useind]#
    xname <- c("neg. \n controls","noci 1","noci 2","mechano","proprio")#
    rownames(logp) <- colnames(logp) <- xname#
    for (k in 5:0) logp[logp < 10^-k] <- k#
    mycol <- rev(heat.colors(5))#
    pdf("Figure3C.pdf")#
    my.image2(logp,text.cex=0,round=2,labels=c(1,2),border="gray70",#
              col=mycol, upper.tri=FALSE, label.col="black",label.cex=2,srt=45,#
              mar=c(7,8,1,1))#
    dev.off()#
}#
makeFigure3DE <- function()#
{#
    ## (c)#
    dat <- cbind(dat3de,line.eff=paste0(dat3de$V1,"@",dat3de$V2))#
    linelab <- sapply(1:nrow(dat),function(x) as.character(unique(laball2[laball2$line.eff==paste0(dat[x,2],"@",dat[x,3]),"linelab"])))#
    cmat2 <- cmat3de[as.numeric(linelab),]#
    cmat2 <- t(apply(cmat2,1,function(x) x/sum(x)*100))#
    n <- nrow(cmat2)#
    d <- ncol(cmat2)#
    matchcl <- sapply(testdiffpbd1[,"line.eff"],function(x) laball2[which(laball2$line.eff %in% x),"cluster.d5"])#
    matchcl2 <- sapply(matchcl,function(x) table(x))#
    matchcl3 <- sapply(matchcl2, function(x) as.numeric(unlist(dimnames(x)))[which.max(x)])#
    mclust.order <- NULL#
    for (i in 1:max(matchcl3)) {#
        mclust.order <- append(mclust.order,which(matchcl3==i))#
    }#
    pdf("Figure3D.pdf")#
    op <- par(mar=c(3,4,1,1)+0.2,mgp=c(4,1,0)) ## Reduced margins at top and left#
    image.plot(x=1:d,y=1:n,z=t(cmat2[mclust.order,]),col=mycol,xlab="",ylab="lines",xaxt="n",cex.lab=csize,cex.axis=lsize,zlim=c(0,40),#
                  legend.args=list(text="probability of performing a behaviotype (%)",#
                  col="black", cex=1.2, side=4, line=2))#
    nc <- table(matchcl3)#
    nc.y <- c(1,cumsum(nc)+1)#
    box()#
    ticks <- 1:29#
    ticksm <- running(cumsum(c(1,c(7,7,8,7))),width=2,fun=mean)#
    par(xpd=TRUE)#
    for (x in ticks) rect(x-0.5,-23,x+0.5,0.5,col=labcol[x], border=NA)#
    box()#
    text(ticks,par("usr")[3]-13,labels=1:29,col="white", xpd=TRUE,cex=0.8,font=2)#
    text(ticksm,par("usr")[3]-35,labels=c("avoid","escape","backup","turn"),col=labcol[c(3,10,17,25)], xpd=TRUE,cex=1.5,font=2)#
    mtext("'hit' test lines", side=2, line=2.5,cex=csize)#
    mtext("behaviotype",side=1,line=0,adj=0,at=30)#
    dev.off()#
#    scan()#
    ## Fig 3E#
    dat2 <- melt(dat3e,id=c("thresh","H","threshv"))#
    names(dat2) <- c("linetype","hypothesis","threshv","pairs","ARI")#
    dat2 <- ddply(dat2, .(pairs,linetype), mutate, hA=ARI[hypothesis=="A"])#
    p <- ggplot(data=dat2, aes(x=ARI))#
    p <- p + facet_wrap(~pairs, nrow=4, scales="free_y")#
    p <- p + stat_density(aes(color=hypothesis),adjust=2,size=1,geom="line")#
    p <- p + geom_vline(aes(xintercept=hA,color=threshv),linetype="dashed",size=1)#
    p <- p + theme_bw()#
    p <- p + xlab("adjusted Rand index") + ylab("density of adjusted Rand index")#
    p <- p + theme(axis.title.x=element_text(size=fsize)) +#
            theme(axis.title.y=element_text(size=fsize,angle=90)) +#
            theme(strip.text=element_text(size=rel(lsize-0.4)))#
    p <- p + labs(color="data")#
    p <- p + scale_color_manual(labels=c("permuted","observed"),values=c(1,2))#
#    print(p)#
    ggsave(plot=p,"Figure3E.pdf")#
}#
makeFigure4A <- function()#
{#
    dat4a <- dat4a[!(is.na(dat4a[,1])),]#
    dat4a <- dat4a[rev(1:nrow(dat4a)),]#
    (behnum <- rev((table(dat4a[,"behavior"])[c("turn-turn","backup","escape","avoid")])))#
    selline <- sapply(1:nrow(dat4a),function(x) which(paste(dat4a[x,"line.Youngser"],dat4a[x,"effector"],sep="@") == laball2$line.eff))#
    (n <- length(selline))#
    sapply(selline,length)#
    sellinename <- sapply(selline,function(x) unique(laball2[x,"line.eff"]))#
    tabline <- ldply(selline, function(x) tabulate(laball2[x,"cluster.d5"],nbins=29))#
    outdish <- sapply(selline,function(x)  unique(laball2[x,"dish"]))#
    dishanim <- lapply(outdish, function(x) lapply(x, function(y) which(laball2$dish %in% y)))#
    tabdish <- llply(dishanim, function(x) ldply(x, function(y) tabulate(laball2[y,"cluster.d5"],nbins=29)))#
    names(tabdish) <- sellinename#
    for (i in 1:length(tabdish)) {#
        rownames(tabdish[[i]]) <- as.character(outdish[[i]])#
    }#
    for (i in 1:n) {#
        tabdish[[i]] <- as.data.frame(matrix(colMeans(tabdish[[i]]),nrow=1))#
    }#
    tabdish2 <- ldply(tabdish)#
    tmp <- tabdish2[,1]#
    tabdish2 <- tabdish2[,-1]#
    myorder <- sapply(1:length(sellinename), function(x) which(tmp %in% sellinename[x]))#
    (selind <- 1:n)#
    nc3 <- sapply(myorder[selind],length)#
    (nc.y3 <- c(1,cumsum(nc3)+1))#
    y21 <- nc.y3[1]; y22 <- nc.y3[length(selind)+1]; (ny3 <- y22-y21+1)#
    dat <- tabdish2[unlist(myorder[selind]),]#
    dat <- t(apply(dat,1,function(x) x/sum(x)*100))#
    pdf("Figure4A.pdf")#
    op <- par(mar=c(3,5.5,1,1)+0.2,mgp=c(4,1,0)) ## Reduced margins at top and left#
    image.plot(x=1:29,y=1:ny3,z=t(dat),col=mycol,#
               xlab="",ylab="",xaxt="n",yaxt="n",cex.lab=csize,zlim=c(0,50),#
               legend.args=list(text="probability of performing a behaviotype (%)",#
               col="black", cex=1.2, side=4, line=2))#
    sub <- cumsum(behnum)+1#
    for (i in y21:y22) {#
        abline(h=nc.y3[i],lwd=0.5,col="black")#
        if (i %in% sub) abline(h=nc.y3[i],lwd=3,col="black")#
    }#
    box()#
    ticks <- 1:29#
    axis(side=1, at=ticks, labels=FALSE)#
    ticks2 <- cumsum(c(7,7,8,7))+0.5#
    ticksm <- running(cumsum(c(1,c(7,7,8,7))),width=2,fun=mean)#
    par(xpd=TRUE)#
    for (x in ticks) rect(x-0.5,1,x+0.5,0.4,col=labcol[x], border=NA)#
    box()#
    text(ticks,par("usr")[3]-0.3,labels=1:29,col="white", xpd=TRUE,cex=0.8,font=2)#
    text(ticksm,par("usr")[3]-1,labels=c("avoid","escape","backup","turn"),col=labcol[c(3,10,17,25)], xpd=TRUE,cex=1.5,font=2)#
    mtext("behaviotype",side=1,line=0,adj=0,at=30)#
    ticks <- running(nc.y3,width=2,fun=mean)#
    lname <- as.character(dat4a[,"line.figure.name"])#
    lcol <- rep(labcol[c(3,10,17,25)],behnum)#
    lcol <- c(lcol,"black")#
    for (i in 1:length(ticks)) {#
        axis(side=2, at=ticks[i], labels=lname[i],las=1,cex.axis=1,col.ticks=lcol[i],col.axis=lcol[i],font=2)#
    }#
    dev.off()#
}#
makeSuppS1toS4 <- function()#
{#
    depth <- 3#
    dat <- laball2$cluster.d3#
    numG <- 1:max(dat)#
    subcol <- labcol#
    datx <- daty <- avec <- bvec <- fvec <- gvec <- cvec2 <- NULL#
    for (featnum in 1:nfeat) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[featnum]+1#
        end <- begi[featnum+1]#
        mvec <- svec <- evec <- kvec <- lvec <- cvec <- NULL#
        for (clusnum in numG) {#
            sel <- which(dat==clusnum)#
            meants <- apply(Znorm[sel,beg:end],2,mean)#
            sdts <- apply(Znorm[sel,beg:end],2,sd)#
            mvec <- c(mvec,meants)#
            svec <- c(svec,sdts)#
            evec <- c(evec,1.96*sdts/sqrt(length(sel)))#
            kvec <- c(kvec,rep(paste("C",sprintf("%02d",clusnum),sep=""),length(meants)))#
            cvec <- c(cvec,rep(labcol[clusnum],length(meants)))#
            lvec <- c(lvec,rep(clusnum,length(meants))) # 50#
        }#
        datx <- c(datx,seq(tbeg,tend,by=0.5))#
        daty <- c(daty,mvec)#
        avec <- c(avec,svec)#
        bvec <- c(bvec,evec)#
        gvec <- c(gvec,cvec)#
        fvec <- c(fvec,rep(featname[featnum],length(mvec)))#
        cvec2 <- c(cvec2,lvec)#
    }#
    dat.df <- data.frame(x=datx,y=daty,sd=avec,se=bvec,col=factor(gvec,levels=labcol),feat=fvec,clust=cvec2)#
    (n <- nrow(dat.df))#
    dat.df$feat <- factor(dat.df$feat, levels = featname)#
    clustplot <- function(subclus,b1,b2) {#
        dat2 <- subset(dat.df, clust %in% subclus)#
        branch <- c(2,6,8,13,17,21,25,28)#
        (subc <- branch[subclus])#
        subcol2 <- subcol[subc]#
        x1 <- 30; x2 <- 60; x3 <- 70#
        rects <- data.frame(xstart = c(x1,x2), xend = c(x2,x3), col = letters[1:2])#
        p <- ggplot(data=dat2, aes(x=x, y=y)) +#
            geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
            facet_wrap(~feat, nrow=4, scales="free_y") +#
            geom_ribbon(aes(ymax=y+se,ymin=y-se,fill=factor(clust),alpha=0.2)) +#
            scale_fill_manual(values=subcol2) +#
            labs(x="time (sec)", y="response", shape="", colour="", linetype="") +#
            theme_bw() +#
            theme(legend.position="none") +#
            theme(axis.title.x=element_text(size=fsize)) +#
            theme(axis.title.y=element_text(size=fsize,angle=90)) +#
            theme(strip.text=element_text(size=rel(lsize-0.4)))#
        p#
    }#
    p1 <- clustplot(1:2, 7, 8); ggsave(plot=p1,"FigureSupp1.pdf")#
    p2 <- clustplot(3:4, 9, 10); ggsave(plot=p2,"FigureSupp2.pdf")#
    p3 <- clustplot(5:6, 11, 12); ggsave(plot=p3,"FigureSupp3.pdf")#
    p4 <- clustplot(7:8, 13, 14); ggsave(plot=p4,"FigureSupp4.pdf")#
}#
makeSuppS5A <- function()#
{#
    ctrlname <- c("38a","ppk","iav")#
    drawTrial <- function(cname) {#
        trial4 <- trial4list[[cname]]#
        trial4 <- cbind(1:nrow(trial4),trial4)#
        colnames(trial4) <- rep("",ncol(trial4))#
        ## shuffle rows#
        set.seed(12345)#
        ind <- sample(nrow(trial4))#
        trial4[,1] <- ind#
        idx <- running(2:ncol(trial4),by=4,width=4,fun=function(x) x, simplify=TRUE)#
        trial4.m <- trial4[,1:5]#
        for (i in 2:29) {#
            mat <- cbind(trial4[,1],trial4[,idx[,i]])#
            trial4.m <- rbind(trial4.m,mat)#
        }#
        colnames(trial4.m) <- c("id","T1","T2","T3","T4")#
        trial4.m <- as.data.frame(trial4.m)#
        trial4.m$cl <- rep(1:29,each=nrow(trial4))#
        trial4.m$T2[trial4.m$T2>0] <- 2#
        trial4.m$T3[trial4.m$T3>0] <- 3#
        trial4.m$T4[trial4.m$T4>0] <- 4#
        ## swap cl(6,7) -> cl(12,13)#
        trial4.m$cl[trial4.m$cl==6] <- 66#
        trial4.m$cl[trial4.m$cl==7] <- 77#
        trial4.m$cl[trial4.m$cl==12] <- 1212#
        trial4.m$cl[trial4.m$cl==13] <- 1313#
        trial4.m$cl[trial4.m$cl==66] <- 12#
        trial4.m$cl[trial4.m$cl==77] <- 13#
        trial4.m$cl[trial4.m$cl==1212] <- 6#
        trial4.m$cl[trial4.m$cl==1313] <- 7#
        trial4.m2 <- melt(trial4.m,id=c("id","cl"),value.name="trial")#
        trial4.m2$trial <- factor(trial4.m2$trial,labels=c("trial 0", "trial 1", "trial 2", "trial 3", "trial 4"))#
        greyv <- grey(0:10/10)[10]#
        p <- ggplot(trial4.m2, aes(variable,id,fill=trial)) +#
            geom_tile(data = subset(trial4.m2,trial!="trial 0"), aes(fill = trial),alpha=1) +#
            geom_tile(data = subset(trial4.m2,trial=="trial 0"), color=greyv,fill="white",alpha=1) +#
            facet_grid(. ~ cl) +#
            theme(axis.text.x=element_blank()) +#
            xlab("behaviotype") + ylab("animal")#
        p <- p + labs(fill="") + #theme_bw() +#
            theme(strip.text=element_text(size=rel(0.4)))#
        p#
    }#
    p1 <- drawTrial(ctrlname[1]); ggsave(plot=p1,"FigureSupp5A-1.pdf")#
    p2 <- drawTrial(ctrlname[2]); ggsave(plot=p2,"FigureSupp5A-2.pdf")#
    p3 <- drawTrial(ctrlname[3]); ggsave(plot=p3,"FigureSupp5A-3.pdf")#
}#
makeSuppS5B <- function()#
{#
    ctrl <- c("pBDPU","noci 2", "mechano", "proprio")#
    ctrl2 <- c("pbd1","38a1","iav1","11f0")#
    hits <- c("R46D01","R44H03")#
    hits2 <- c("46D01","44H03")#
    hitgr <- sapply(hits2, function(x) glob2rx(paste0("*",x,"*ppk*")))#
    subj <- c(ctrl2,hits)#
    subjname <- c(ctrl,hits)#
    subjctrl <- sapply(ctrl2, function(x) grep(x,labTall$ctrl))#
    subjhits <- lapply(hitgr, function(x) grep(x,as.character(labTall$line.eff)))#
    names(subjhits) <- hits#
    subjlines <- c(subjctrl,subjhits)#
    linetabC <- linetabT <- NULL#
    KhatC <- 29; KhatT <- 32#
    for (i in 1:length(subjctrl)) {#
        dat <- labTall[subjctrl[[i]],c("T1","T2","T3","T4")]#
        mat <- matrix(0,nrow(dat),KhatC)#
        for (j in 1:nrow(mat)) {#
            tmp <- as.numeric(dat[j,])#
            for (k in 1:4) {#
                mat[j,tmp[k]] <- mat[j,tmp[k]] + 1#
            }#
        }#
        linetabC[[i]] <- mat#
    }#
    for (i in 1:length(subjhits)) {#
        dat <- labTall[subjhits[[i]],c("T1","T2","T3","T4")]#
        mat <- matrix(0,nrow(dat),KhatT)#
        for (j in 1:nrow(mat)) {#
            tmp <- as.numeric(dat[j,])#
            for (k in 1:4) {#
                mat[j,tmp[k]] <- mat[j,tmp[k]] + 1#
            }#
        }#
        linetabT[[i]] <- mat#
    }#
    linetab <- c(linetabC,linetabT)#
    names(linetab) <- subj#
    (n <- length(outS5B))#
    (nv <- sapply(outS5B,function(x) x$n))#
    xmax <- 20#
    (pvec <- sapply(outS5B,function(x) x$n4)) #c(17,12,4)#
    df <- data.frame(line=paste0(subjname[1]," (N = ",nv[1],")"),probability=outS5B[[1]]$H0[1:xmax])#
    for (i in 2:n) {#
        df1 <- data.frame(line=paste0(subjname[i]," (N = ",nv[i],")"),probability=outS5B[[i]]$H0[1:xmax])#
        df <- rbind(df,df1)#
    }#
    dat2 <- df#
    dat2$x <- rep(seq(1,xmax),n)#
    dat2$max <- rep(pvec,each=xmax)#
    fsize <- 14; lsize <- 1#
    p <- ggplot(data=dat2, aes(x=x,y=probability))#
    p <- p + facet_wrap(~line, nrow=3, scales="free")#
    p <- p + geom_line(aes(color=line))#
    p <- p + geom_vline(aes(xintercept=max),linetype="dashed")#
    p <- p + theme_bw() + xlab("# animals expected to perform the same behaviotype on all 4 trials")#
    p <- p + theme(legend.position="none")#
    p <- p + theme(axis.title.x=element_text(size=fsize)) +#
             theme(axis.title.y=element_text(size=fsize,angle=90)) +#
             theme(strip.text=element_text(size=rel(lsize)))#
    ggsave(plot=p,"FigureSupp5B.pdf")#
#    print(p)#
}#
makeSuppS6AB <- function()#
{#
    animid <- c(140,12,148,147)#
    mydish <- c("20101123_124517","20110513_134910","20100826_100515","20100826_101729")#
    lname <- c("GMR_65B06_AE_01","GMR_38A10_AE_01","GMR_22D10_AE_01","GMR_68D02_AE_01")#
    ename <- c("UAS_ChRh2_23_0011","UAS_ppkGAL80_ChR2_23_0015","UAS_ChRh2_23_0011","UAS_ChRh2_23_0011")#
    linelab <- c(882,513,256,927)#
    ctrllab <- c("test","38a10","test","test")#
    anim4 <- data.frame(id=animid,dish=mydish,line=lname,eff=ename,linelab=linelab,ctrllab=ctrllab)#
    behav <- c(17,18)#
    fnum <- 2 # "forward/backward crawling bias"#
    df <- NULL#
    for (dnum in 1:length(animid)) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[fnum]+1#
        end <- begi[fnum+1]#
        sel1 <- which(laball2$animid==animid[dnum])#
        sel2 <- which(laball2$dish==mydish[dnum])#
        sel3 <- which(laball2$line==lname[dnum])#
        sel4 <- which(laball2$effector==ename[dnum])#
        sel <- Reduce(intersect, list(sel1,sel2,sel3,sel4))#
        dat <- matrix(Znorm[sel,beg:end],nrow=length(sel)) # behav#
#        dat <- Znorm[laball2$dish==mydish[dnum],beg:end]#
        meants <- apply(dat,2,mean)#
        sdts <- apply(dat,2,sd)#
        evec <- 1.96*sdts/sqrt(nrow(dat))#
        daty <- as.vector(t(dat))#
        datx <- seq(tbeg,tend,by=0.5)#
        avec <- rep(1:nrow(dat),each=ncol(dat))#
        fvec <- rep(featname[fnum],length(dat))#
        cvec <- rep("grey",length(dat))#
        datd <- animid[dnum]#
        dat.df <- data.frame(x=datx,y=daty,anim=factor(avec),feat=fvec,col=cvec,dish=datd)#
        df <- rbind(df,dat.df)#
    }#
    (n <- nrow(df))#
    df$feat <- factor(df$feat, levels = featname)#
    df$dish <- factor(df$dish, levels = animid) ## animid#
    p <- ggplot(data=df, aes(x=x, y=y)) +#
           geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
           facet_wrap(~dish, nrow=2) +#
           geom_line(aes(colour=col, group=anim, alpha=0.5)) +#
           labs(x="time (sec)", y="response", shape="", colour="", linetype="") +#
           theme_bw() +#
           theme(legend.position="none") +#
           theme(axis.title.x=element_text(size=fsize)) +#
           theme(axis.title.y=element_text(size=fsize,angle=90)) +#
           theme(strip.text=element_text(size=rel(lsize-0.4)))#
    p <- p + scale_color_manual(values=rep("grey",n))#
#    print(p)#
#    scan()#
    fnum <- 2 # "forward/backward crawling bias"#
    df <- NULL#
    for (dnum in 1:length(behav)) {#
        begi <- seq(0,ncol(Znorm),by=ncol(Znorm)/nfeat)#
        beg <- begi[fnum]+1#
        end <- begi[fnum+1]#
        sel <- which(laball2$cluster.d5==behav[dnum])#
        dat <- matrix(Znorm[sel,beg:end],nrow=length(sel)) # behav#
        meants <- apply(dat,2,mean)#
        sdts <- apply(dat,2,sd)#
        evec <- 1.96*sdts/sqrt(nrow(dat))#
        daty <- as.vector(t(dat))#
        datx <- seq(tbeg,tend,by=0.5)#
        avec <- rep(1:nrow(dat),each=ncol(dat))#
        fvec <- rep(featname[fnum],length(dat))#
        cvec <- rep("grey",length(dat))#
        datd <- behav[dnum]#
        dat.df <- data.frame(x=datx,y=daty,y2=meants,se=evec,anim=factor(avec),feat=fvec,col=cvec,dish=datd)#
        df <- rbind(df,dat.df)#
    }#
    (n <- nrow(df))#
    df$feat <- factor(df$feat, levels = featname)#
    df$dish <- factor(df$dish, levels = behav) ## animid#
    lab1718 <- labcol[behav]#
    p2 <- ggplot(data=df, aes(x=x, y=y2)) +#
           geom_rect(aes(xmin=tbeg,xmax=stend,ymin=-Inf,ymax=Inf),fill=shadecol,alpha=0.1) +#
           facet_wrap(~dish, nrow=2) + #, scales="free_y") +#
           geom_ribbon(aes(ymax=y2+se,ymin=y2-se,fill=factor(dish),alpha=0.2)) +#
           scale_fill_manual(values=lab1718) +#
           labs(x="time (sec)", y="response", shape="", colour="", linetype="") +#
           theme_bw() +#
           theme(legend.position="none") +#
           theme(axis.title.x=element_text(size=fsize)) +#
           theme(axis.title.y=element_text(size=fsize,angle=90)) +#
           theme(strip.text=element_text(size=rel(lsize-0.4)))#
#    print(p2)#
    ggsave(plot=p2,"FigureSupp6.pdf")    #
}#
plotcolordist <- function(mout,mdsz,mycol,na.col=mycol[1],mybrk=NULL,brklab=NULL,corder="cl",testcl=NULL,xlab="",ylab="",border=FALSE,legend.args=NULL,sortz=FALSE,tind=c(1,2),fake=FALSE,hits=NULL,nonhits=NULL,...)#
{#
    if (is.vector(mout)) cvec <- mout#
    else cvec <- mout$class#
    mclust.order <- NULL#
    for (i in 1:max(cvec)) {#
        ord <- which(cvec==i)#
        if (sortz) { ## sort 1st row/column#
            if (i %in% tind) { ## for hits and non-hits#
                tmp <- mdsz[1,ord]#
                ind <- order(tmp)#
                ord <- ord[ind]#
            }#
        }#
        mclust.order <- append(mclust.order,ord)#
    }#
    if (!is.null(testcl)) {#
        ## assume that the test is the last group#
        testgroup <- which(cvec==max(cvec))#
        test.order <- NULL#
        for (i in 1:max(testcl)) {#
            test.order <- append(test.order,(min(testgroup)-1)+which(testcl==i))#
        }#
        mclust.order[testgroup] <- test.order#
    }#
    if (ncol(mdsz)==nrow(mdsz)) {#
        zdist <- mdsz#
    } else {#
        zdist <- as.matrix(dist(mdsz))#
    }#
    if (is.null(mybrk)) {#
        mybrk <- seq(min(min(zdist),0),max(max(zdist),1),length.out=length(mycol)+1)#
        if (is.null(brklab)) {#
            brklab <- round(mybrk,1)#
        }#
    }#
    n <- nrow(zdist)#
    newzdist <- zdist[mclust.order,mclust.order]#
    if (fake) {#
        cat("faking...\n")#
        htab <- cumsum(table(cvec))#
        hind <- (htab[tind[1]-1]+1):htab[tind[1]]#
        nind <- (htab[tind[2]-1]+1):htab[tind[2]]#
        min1 <- min(newzdist[1,])#
        logrrr <- log10(hits);#
        logrrr[logrrr== -Inf] <- min1; logrrr[logrrr<min1] <- min1#
        logsss <- log10(nonhits);#
        logsss[logsss== -Inf] <- min1#
        logsss[logsss<min1] <- min1#
        newzdist[1,hind] <- sort(logrrr)#
        newzdist[1,nind] <- sort(logsss)#
        newzdist[,1] <- rev(newzdist[1,])#
    }#
    cmat <- dmat.color(newzdist,mycol) # was 5#
    newzdist <- newzdist[1:n,n:1]#
    image.plot(x=1:n,y=1:n,z=newzdist,col=mycol,xaxt="n",yaxt="n",xlab=xlab,ylab=ylab,breaks=mybrk,lab.breaks=brklab,cex.lab=csize,legend.args=legend.args)#
    plotcolors(cmat,na.color=na.col,add=T)#
    ## add boxes around clusters for d40#
    if (border) {#
        nc <- table(cvec)#
        nc.x <- c(1,cumsum(nc)+1)#
        nc.y <- c(nrow(mdsz),nrow(mdsz)-cumsum(nc)+1)#
        for (i in 1:max(cvec)) {#
            x1 <- nc.x[i]; x2 <- nc.x[i+1]#
            y1 <- nc.y[i]; y2 <- nc.y[i+1]#
            polygon(c(x1,x1,x2,x2), c(y1,y2,y2,y1),border=1,lwd=2)#
        }#
        if (!is.null(testcl)) {#
            nc2 <- table(testcl)#
            nc2.x <- min(testgroup)-1 + c(1,cumsum(nc2)+1)#
            nc2.y <- c(nrow(mdsz),nrow(mdsz)-cumsum(nc2)+1) - min(testgroup)#
            for (i in 1:max(testcl)) {#
                x1 <- nc2.x[i]; x2 <- nc2.x[i+1]#
                y1 <- nc2.y[i]; y2 <- nc2.y[i+1]#
                polygon(c(x1,x1,x2,x2), c(y1,y2,y2,y1),border=4,lwd=2)#
            }#
        }#
    }#
    box()#
}#
my.image2 <- function (x, col = c("white", rev(heat.colors(23))), breaks,#
                       log = TRUE, border = NA, box.offset = 0.1, round = 3, cex,#
                       text.cex = 1, text.col = "black", label.col = "black",#
                       mar = c(1, 3, 3, 1),#
                       labels = 2:3, upper.tri = FALSE, diag.lab = NULL,#
                       label.offset = 0.1, label.cex = 1, srt = 90)#
{#
    if (!is.matrix(x)) {#
        x <- t(as.matrix(x))#
    }#
    if (!missing(cex)) {#
#        text.cex = cex#
        label.cex = cex#
    }#
    op <- par(mar = mar, xpd = TRUE)#
    x <- x[nrow(x):1, , drop = FALSE]#
    x1 <- ncol(x)#
    y1 <- nrow(x)#
    if (length(col) == 1) {#
        col <- rep(col, 3)#
    }#
    if (length(col) == 2) {#
        col <- c(col, col[-1])#
    }#
    if (missing(breaks)) {#
        breaks <- length(col) - 1#
    }#
    else {#
        if (length(breaks) != length(col)) {#
            warning("Breaks is not the same length as colors.\nSome blocks may be unfilled or some colors may not be used")#
        }#
    }#
    checkmin <- min(x, na.rm = TRUE)#
    if (checkmin < 0) {#
        x <- x - checkmin#
    }#
    missingNA <- is.na(x)#
    x[x == 0] <- NA#
    if (log) {#
        z <- cut(log10(x), breaks)#
    }#
    else {#
        z <- cut(x, breaks)#
    }#
    z2 <- matrix(z, y1, x1)#
    x[is.na(x)] <- 0#
    x[missingNA] <- NA#
    if (checkmin < 0) {#
        x <- x + checkmin#
    }#
    x <- round(x, round)#
    offset <- box.offset/2#
    plot(seq(1, x1 + 1, len = 2), seq(1, y1 + 1, len = 2), type = "n",#
        axes = FALSE, ann = FALSE, xaxs = "i", yaxs = "i")#
    for (i in 1:x1) {#
        for (j in 1:y1) {#
            if (upper.tri & (i+j <= nrow(x))) next#
            if (!is.null(diag.lab) & (i+j-1==nrow(x))) next#
            if (is.na(z2[j, i])) {#
                n1 <- 1#
            }#
            else {#
                n1 <- match(z2[j, i], levels(z)) + 1#
            }#
            rect(i + offset, j + offset, i + 1 - offset, j +#
                1 - offset, border = border, col = col[n1])#
            if (!is.na(text.col)) {#
                if (text.cex!=0)#
                    text(i + 0.5, j + 0.5, x[j, i], cex = text.cex,#
                         col = text.col)#
            }#
        }#
    }#
    if (2 %in% labels) {#
        if (is.null(diag.lab))#
            text(1 - label.offset, 1:y1 + 0.5, rownames(x), pos = 2,#
                 offset = 0, cex = label.cex, col=label.col)#
        else#
            text(x1:1 + 1 - label.offset, 1:y1 + 0.5, rownames(x), pos = 2,#
                 offset = 0, cex = label.cex, col=label.col)#
    }#
    if (4 %in% labels)#
        text(x1 + 1 + label.offset, 1:y1 + 0.5, rownames(x),#
            pos = 4, offset = 0, cex = label.cex, col=label.col)#
    if (1 %in% labels)#
        text(1:x1 + 0.5, 0.9 - label.offset, colnames(x), pos = 2,#
            offset = 0, srt = (0 + srt), cex = label.cex, col=label.col)#
    if (3 %in% labels)#
        text(1:x1 + 0.8, y1 + 1.1 + label.offset, colnames(x), , col=label.col,#
            pos = 2, offset = 0, srt = (360 - srt), cex = label.cex)#
    par(op)#
}#
#generateFigures <- function()#
#{#
    ## load data#
    filename <- url("http://www.cis.jhu.edu/~parky/Behaviotypes/Codes/behaviotypes-data.Rbin")#
    cat("loading the required data...\n")#
    load(filename)#
    cat("Please hit RETURN at each prompt!\n")#
    cat("(Note that some of the figures take long to be drawn...)\n")#
    makeFigure1(); cat("Figure 1 is done.\n")#
    makeFigure2A(); cat("Figure 2A is done.\n")#
    makeFigure2B(); cat("Figure 2B is done.\n")#
    makeFigure2CF(); cat("Figures 2CF are done.\n")#
    makeFigure2DE(); cat("Figures 2DE are done.\n")#
    makeFigure3A();  cat("Figure 3A is done.\n")#
    makeFigure3B();  cat("Figure 3B is done.\n")#
    makeFigure3C();  cat("Figure 3C is done.\n")#
    makeFigure3DE(); cat("Figures 3DE are done.\n")#
    makeFigure4A();  cat("Figure 4A is done.\n")#
    makeSuppS1toS4(); cat("Figures Supplement 1-4 are done.\n")#
    makeSuppS5A(); cat("Figure Supplement 5A is done.\n")#
    makeSuppS5B(); cat("Figure Supplement 5B is done.\n")#
    makeSuppS6AB(); cat("Figure Supplement 6 is done.\n")#
    cat("Done!\n")#
#}
getwd()
system('open .')
q()
dir()
load('Downloads/Ahat12.Rbin')
ls()
A3
str(A)
ls()
str(A)
str(A3)
ls()
str(mydata)
str(A3)
image(bdiag(A3))
image(bdiag(A3),lwd=2)
image(bdiag(A3),lwd=1)
A3[[1]]
tmp = A3[[1]]
tmp
lapply(A3,dim)
tmp = A3[[1]]
svd(tmp3)
svd(tmp3)$d
svd(tmp)$d
plot(svd(tmp)$d,type='b')
image(igraph)
require(igraph)
tmp = apply(A3,function(x) {nvertex = dim(x)[1];tmpv=sample(1:nvertex,86,replace=FALSE);x[tmpv,tmpv]})
tmp = lapply(A3,function(x) {nvertex = dim(x)[1];tmpv=sample(1:nvertex,86,replace=FALSE);x[tmpv,tmpv]})
tmp = lapply(A3,function(x) {nvertex = dim(x)[1];tmpv=sample(1:nvertex,83,replace=FALSE);x[tmpv,tmpv]})
image(bdiag(tmp))
image(bdiag(tmp),lwd=1)
tmp = lapply(A3,function(x) {nvertex = dim(x)[1];tmpv=sample(1:nvertex,83,replace=FALSE);x[tmpv,tmpv]})
q()
Ahat = read.table('~/Downloads/drosophila.csv',header=TRUE,row.names=TRUE,sep=',')
head(Ahat[,1:10])
Ahat = read.table('~/Downloads/drosophila.csv')
str(Ahat)
Ahat = as.matrix(Ahat)
image(Ahat)
Ahat
install.packages('segue')
require(segue)
setCredentials()
?setCredentials
setCredentials(awsAccessKeyText=)
setCredentials(awsAccessKeyText='AKIAJFSMM2YSCLIKKY7A',awsSecretKeyText='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')
require(segue)
myCluster <- createCluster(numInstances=5)
install.packages('HadoopStreaming')
install.packages('getopt')
emit <- function(chunk.of.text){#
  words <- strsplit(chunk.of.text, " ")#
  sapply(words, function(word){#
      write(paste(word, "1"), file=stdout())#
  })#
}#
(function() {#
  input <- file("stdin", open="r")#
  #read input in reasonable cunks and apply emit to each chunk#
  hsLineReader(file = input, chunkSize = 3, skip = 0, FUN = emit)#
})()
library(HadoopStreaming)#
library(getopt)#
#
#transform input to a uniform and processable stream of data, consisting of key/value pairs #
emit <- function(chunk.of.text){#
  words <- strsplit(chunk.of.text, " ")#
  sapply(words, function(word){#
      write(paste(word, "1"), file=stdout())#
  })#
}#
(function() {#
  input <- file("stdin", open="r")#
  #read input in reasonable cunks and apply emit to each chunk#
  hsLineReader(file = input, chunkSize = 3, skip = 0, FUN = emit)#
})()
process <- function(piece.of.map){#
  #aggregate the values per word#
  result <- aggregate(x=piece.of.map$value, by=list(word=piece.of.map$word), FUN=function(map.values){#
    sum(as.integer(map.values))#
  })#
  #write a nicely formatted table#
  write.table(result, file=stdout(), quote=FALSE, row.names=FALSE, col.names=FALSE)#
}#
#
reduce <- function(input){#
  #create column names to make is easier to work with the data set#
  names <- c("word", "value")#
  cols = as.list(vector(length=2, mode="character"))#
  names(cols) <- names#
  #read from the input#
  hsTableReader(file=input, cols, ignoreKey=TRUE, chunkSize=100000, FUN=process, sep=" ")#
}#
#
(function() {#
  input <- file("stdin", open="r")#
  reduce(input)#
})()
q()
require(partitions)
install.packages('partitions')
require(parts)
require(partitions)
?parts
parts(3)
parts(3,2,FALSE)
diffparts(3,2,FALSE)
diffparts(3,2)
restrictedparts(3,2)
restrictedparts(3,2,FALSE)
restrictedparts(3,2,include.zero=FALSE)
restrictedparts(3,2)
restrictedparts(6,2)
restrictedparts(6,2,include.zero=FALSE)
q()
require(igraph)
require(clue)
install.packages('clue')
q()
ls()
rm(list=ls())
load('Downloads/Archive/retval2-rho0.05.Rbin')
ls()
str(etval)
str(retval)
length(retval)
retval[[1]]
lapply(retval[[1]],function(x) apply(x,1,table)
)
require(Mclust)
require(mclust)
lapply(retval[[1]],function(x) apply(x,1,table))
q()
require(mclust)
require(Mclust)
require(mclust)
q()
load("/Users/nhlee/Desktop/HW4RpackSindhooraM/data/agen.edgelist.RData")
load('~/Desktop/HW4RpackSindhooraM/data/eg-fg-lcc-1323.Rbin')
rm(list=ls())
load('~/Desktop/HW4RpackSindhooraM/data/eg-fg-lcc-1323.Rbin')
ls()
str(eg)
WikiData = list(english=eg,french=fg)
setwd('~/Desktop/HW4RpackSindhooraM/data/')
save(WikiData,file='WikiData.RData')
rm(list=ls())
ls()
load('WikiData.RData')
ls()
str(WikiData)
rm(list=ls())
load('mityadata.Rdata')
ls()
str(output.gic)
rm(list=ls())
load('data-C-elegans.Rdata')
ls()
str(data.Celegans)
data.Celegans
C.eleganGraphs = data.Celegans
save(C.eleganGraphs,file='CeleganData.RData')
